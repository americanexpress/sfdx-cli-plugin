import * as oclifTest from '@oclif/test';
import { command, Config, expect, FancyTypes } from '@oclif/test';
import { AuthFields } from '@salesforce/core';
import { TestContext } from '@salesforce/core/lib/testSetup';
import { AnyJson, JsonMap } from '@salesforce/ts-types';
import * as IConfig from '@oclif/config/lib/config';
import { loadConfig } from '@oclif/test/lib/load-config';
declare const $$: TestContext;
declare const test: oclifTest.FancyTypes.Base<oclifTest.FancyTypes.Context, {
    skip: {
        output: {};
        args: [];
    };
} & {
    only: {
        output: {};
        args: [];
    };
} & {
    retries: {
        output: {};
        args: [number];
    };
} & {
    catch: {
        output: {
            error: Error;
        };
        args: [string | RegExp | ((err: Error) => any), {
            raiseIfNotThrown?: boolean;
        }?];
    };
} & {
    env: {
        output: {};
        args: [{
            [k: string]: string;
        }, oclifTest.FancyTypes.EnvOptions?];
    };
} & {
    stub: {
        output: {
            stubs: any[];
        };
        args: any[];
    };
} & {
    stdin: {
        output: {};
        args: [string, number?];
    };
} & {
    stderr: {
        output: {
            readonly stderr: string;
        };
        args: [{
            print?: boolean;
            stripColor?: boolean;
        }?];
    };
} & {
    stdout: {
        output: {
            readonly stdout: string;
        };
        args: [{
            print?: boolean;
            stripColor?: boolean;
        }?];
    };
} & {
    nock: {
        output: {
            error?: Error;
            nock: number;
        };
        args: [string, oclifTest.FancyTypes.NockOptions | oclifTest.FancyTypes.NockCallback, oclifTest.FancyTypes.NockCallback?];
    };
} & {
    timeout: {
        output: {
            timeout: number;
        };
        args: [number?];
    };
} & {
    loadConfig: {
        output: {
            config: oclifTest.Config.IConfig;
        };
        args: [loadConfig.Options?];
    };
} & {
    command: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        args: [string | string[], loadConfig.Options?];
    };
} & {
    exit: {
        output: {
            error: any;
        };
        args: [number?];
    };
} & {
    hook: {
        output: {
            config: oclifTest.Config.IConfig;
            expectation: string;
        };
        args: [string, object?, loadConfig.Options?];
    };
} & {
    withOrg: {
        output: any;
        args: [Partial<AuthFields>?, boolean?];
    };
} & {
    withConnectionRequest: {
        output: any;
        args: [(request?: any, options?: any) => Promise<AnyJson>];
    };
} & {
    withProject: {
        output: any;
        args: [JsonMap?];
    };
}>;
export default test;
export { expect, FancyTypes, Config, command, loadConfig, IConfig, test, $$, TestContext };

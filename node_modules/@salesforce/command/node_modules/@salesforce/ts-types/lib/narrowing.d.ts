import { NamedError } from './internal';
import { AnyJson, JsonArray, JsonMap, Many, Optional } from './types';
/**
 * Tests whether an `any` value is a `string`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
export declare function isString(value: any): value is string;
/**
 * Tests whether an `any` value is a `number`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
export declare function isNumber(value: any): value is number;
/**
 * Tests whether an `any` value is a `boolean`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
export declare function isBoolean(value: any): value is boolean;
/**
 * Tests whether an `any` value is an `object` subtype.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
export declare function isObject(value: any): value is object;
/**
 * Tests whether or not an `any` value is a plain JS object.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
export declare function isPlainObject(value: any): value is object;
/**
 * Tests whether `any` value is a valid JSON type.
 *
 * @param {any} [value] The value to test.
 * @returns {boolean}
 */
export declare function isAnyJson(value?: any): boolean;
/**
 * Tests whether an `AnyJson` value is an object.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
export declare function isJsonMap(value?: AnyJson): value is JsonMap;
/**
 * Tests whether an `AnyJson` value is an array.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
export declare function isJsonArray(value?: AnyJson): value is JsonArray;
/**
 * Narrows an `any` value to an `AnyJson` if it is type compatible, or returns undefined otherwise.
 *
 * @param {any} value The value to test.
 * @returns {boolean}
 */
export declare function asAnyJson(value: any): Optional<AnyJson>;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {string}
 */
export declare function asString(value?: AnyJson): Optional<string>;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {number}
 */
export declare function asNumber(value?: AnyJson): Optional<number>;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
export declare function asBoolean(value?: AnyJson): Optional<boolean>;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {JsonMap}
 */
export declare function asJsonMap(value?: AnyJson): Optional<JsonMap>;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {JsonArray}
 */
export declare function asJsonArray(value?: AnyJson): Optional<JsonArray>;
/**
 * Narrows a type `Optional<T>` to a `T` or raises an error.
 *
 * @param {T} value The value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @throws {NamedError} **`{name: 'UnexpectedValueTypeError'}`** If the value was undefined.
 */
export declare function ensure<T>(value: Optional<T>, message?: string): T;
/**
 * Narrows an `any` value to an `AnyJson` if it is type compatible, or returns undefined otherwise.
 *
 * @param {any} value An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {AnyJson}
 * @throws {UnexpectedValueTypeError} If the value was not a JSON value type.
 */
export declare function ensureAnyJson(value: any, message?: string): AnyJson;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {string}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureString(value?: AnyJson, message?: string): string;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {number}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureNumber(value?: AnyJson, message?: string): number;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {boolean}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureBoolean(value?: AnyJson, message?: string): boolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {JsonMap}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureJsonMap(value?: AnyJson, message?: string): JsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {JsonArray}
 * @throws {NamedError} **`{name: 'UnexpectedValueTypeError'}`** If the value was undefined.
 */
export declare function ensureJsonArray(value?: AnyJson, message?: string): JsonArray;
/**
 * Gets an `AnyJson` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {AnyJson} [defaultValue] A fallback value.
 * @returns {AnyJson|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsAnyJson(json: JsonMap, path: Many<string>): Optional<AnyJson>;
export declare function getAsAnyJson(json: JsonMap, path: Many<string>, defaultValue: AnyJson): AnyJson;
/**
 * Gets a `string` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {string} [defaultValue] A fallback value.
 * @returns {string|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsString(json: JsonMap, path: Many<string>): Optional<string>;
export declare function getAsString(json: JsonMap, path: Many<string>, defaultValue: string): string;
/**
 * Gets a `number` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {number} [defaultValue] A fallback value.
 * @returns {number|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsNumber(json: JsonMap, path: Many<string>): Optional<number>;
export declare function getAsNumber(json: JsonMap, path: Many<string>, defaultValue: number): number;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {boolean} [defaultValue] A fallback value.
 * @returns {boolean|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsBoolean(json: JsonMap, path: Many<string>): Optional<boolean>;
export declare function getAsBoolean(json: JsonMap, path: Many<string>, defaultValue: boolean): boolean;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {JsonMap} [defaultValue] A fallback value.
 * @returns {JsonMap|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsJsonMap(json: JsonMap, path: Many<string>): Optional<JsonMap>;
export declare function getAsJsonMap(json: JsonMap, path: Many<string>, defaultValue: JsonMap): JsonMap;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @param {JsonArray} [defaultValue] A fallback value.
 * @returns {JsonArray|undefined}
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getAsJsonArray(json: JsonMap, path: Many<string>): Optional<JsonArray>;
export declare function getAsJsonArray(json: JsonMap, path: Many<string>, defaultValue: JsonArray): JsonArray;
/**
 * Gets an `AnyJson` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {AnyJson}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureAnyJson(json: JsonMap, path: Many<string>): AnyJson;
/**
 * Gets a `string` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {string}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureString(json: JsonMap, path: Many<string>): string;
/**
 * Gets a `number` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {number}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureNumber(json: JsonMap, path: Many<string>): number;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {boolean}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureBoolean(json: JsonMap, path: Many<string>): boolean;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {JsonMap}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureJsonMap(json: JsonMap, path: Many<string>): JsonMap;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {JsonArray}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
export declare function getEnsureJsonArray(json: JsonMap, path: Many<string>): JsonArray;
/**
 * Indicates that the a type-narrowing mismatch for the given value.
 */
export declare class UnexpectedValueTypeError extends NamedError {
    constructor(message: string);
}

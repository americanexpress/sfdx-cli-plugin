"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const internal_1 = require("./internal");
/**
 * Tests whether an `any` value is a `string`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
function isString(value) {
    return typeof value === 'string';
}
exports.isString = isString;
/**
 * Tests whether an `any` value is a `number`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
function isNumber(value) {
    return typeof value === 'number';
}
exports.isNumber = isNumber;
/**
 * Tests whether an `any` value is a `boolean`.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
function isBoolean(value) {
    return typeof value === 'boolean';
}
exports.isBoolean = isBoolean;
/**
 * Tests whether an `any` value is an `object` subtype.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
function isObject(value) {
    return value !== null && typeof value === 'object';
}
exports.isObject = isObject;
/**
 * Tests whether or not an `any` value is a plain JS object.
 *
 * @param {any} value Any value to test.
 * @returns {boolean}
 */
function isPlainObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
exports.isPlainObject = isPlainObject;
/**
 * Tests whether `any` value is a valid JSON type.
 *
 * @param {any} [value] The value to test.
 * @returns {boolean}
 */
function isAnyJson(value) {
    return value === null
        || isString(value)
        || isNumber(value)
        || isBoolean(value)
        || isJsonMap(value)
        || isJsonArray(value);
}
exports.isAnyJson = isAnyJson;
/**
 * Tests whether an `AnyJson` value is an object.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
function isJsonMap(value) {
    return isPlainObject(value);
}
exports.isJsonMap = isJsonMap;
/**
 * Tests whether an `AnyJson` value is an array.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
function isJsonArray(value) {
    return Array.isArray(value);
}
exports.isJsonArray = isJsonArray;
/**
 * Narrows an `any` value to an `AnyJson` if it is type compatible, or returns undefined otherwise.
 *
 * @param {any} value The value to test.
 * @returns {boolean}
 */
function asAnyJson(value) {
    return isAnyJson(value) ? value : undefined;
}
exports.asAnyJson = asAnyJson;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {string}
 */
function asString(value) {
    return isString(value) ? value : undefined;
}
exports.asString = asString;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {number}
 */
function asNumber(value) {
    return isNumber(value) ? value : undefined;
}
exports.asNumber = asNumber;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {boolean}
 */
function asBoolean(value) {
    return isBoolean(value) ? value : undefined;
}
exports.asBoolean = asBoolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {JsonMap}
 */
function asJsonMap(value) {
    return isJsonMap(value) ? value : undefined;
}
exports.asJsonMap = asJsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or returns undefined otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @returns {JsonArray}
 */
function asJsonArray(value) {
    return isJsonArray(value) ? value : undefined;
}
exports.asJsonArray = asJsonArray;
/**
 * Narrows a type `Optional<T>` to a `T` or raises an error.
 *
 * @param {T} value The value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @throws {NamedError} **`{name: 'UnexpectedValueTypeError'}`** If the value was undefined.
 */
function ensure(value, message) {
    if (value === undefined) {
        throw new UnexpectedValueTypeError(message || 'Value is undefined');
    }
    return value;
}
exports.ensure = ensure;
/**
 * Narrows an `any` value to an `AnyJson` if it is type compatible, or returns undefined otherwise.
 *
 * @param {any} value An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {AnyJson}
 * @throws {UnexpectedValueTypeError} If the value was not a JSON value type.
 */
function ensureAnyJson(value, message) {
    if (!isAnyJson(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a JSON value type');
    }
    return value;
}
exports.ensureAnyJson = ensureAnyJson;
/**
 * Narrows an `AnyJson` value to a `string` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {string}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
function ensureString(value, message) {
    if (!isString(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a string');
    }
    return value;
}
exports.ensureString = ensureString;
/**
 * Narrows an `AnyJson` value to a `number` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {number}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
function ensureNumber(value, message) {
    if (!isNumber(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a number');
    }
    return value;
}
exports.ensureNumber = ensureNumber;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {boolean}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
function ensureBoolean(value, message) {
    if (!isBoolean(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a boolean');
    }
    return value;
}
exports.ensureBoolean = ensureBoolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {JsonMap}
 * @throws {UnexpectedValueTypeError} If the value was undefined.
 */
function ensureJsonMap(value, message) {
    if (!isJsonMap(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a JsonMap');
    }
    return value;
}
exports.ensureJsonMap = ensureJsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type compatible, or raises an error otherwise.
 *
 * @param {AnyJson} [value] An `AnyJson` value to test.
 * @param {string} [message] The error message to use if `value` is not type compatible.
 * @returns {JsonArray}
 * @throws {NamedError} **`{name: 'UnexpectedValueTypeError'}`** If the value was undefined.
 */
function ensureJsonArray(value, message) {
    if (!isJsonArray(value)) {
        throw new UnexpectedValueTypeError(message || 'Value is not a JsonArray');
    }
    return value;
}
exports.ensureJsonArray = ensureJsonArray;
function getAsAnyJson(json, path, defaultValue) {
    if (typeof path === 'string') {
        path = path.split('.');
    }
    let index = 0;
    let node = json;
    while (isJsonMap(node) && index < path.length) {
        node = node[path[index++]];
    }
    return ((index && index === path.length) ? node : undefined) || defaultValue;
}
exports.getAsAnyJson = getAsAnyJson;
function getAsString(json, path, defaultValue) {
    if (defaultValue)
        return ensureString(getAsAnyJson(json, path, defaultValue));
    return asString(getAsAnyJson(json, path));
}
exports.getAsString = getAsString;
function getAsNumber(json, path, defaultValue) {
    if (defaultValue)
        return ensureNumber(getAsAnyJson(json, path, defaultValue));
    return asNumber(getAsAnyJson(json, path));
}
exports.getAsNumber = getAsNumber;
function getAsBoolean(json, path, defaultValue) {
    if (defaultValue)
        return ensureBoolean(getAsAnyJson(json, path, defaultValue));
    return asBoolean(getAsAnyJson(json, path));
}
exports.getAsBoolean = getAsBoolean;
function getAsJsonMap(json, path, defaultValue) {
    if (defaultValue)
        return ensureJsonMap(getAsAnyJson(json, path, defaultValue));
    return asJsonMap(getAsAnyJson(json, path));
}
exports.getAsJsonMap = getAsJsonMap;
function getAsJsonArray(json, path, defaultValue) {
    if (defaultValue)
        return ensureJsonArray(getAsAnyJson(json, path, defaultValue));
    return asJsonArray(getAsAnyJson(json, path));
}
exports.getAsJsonArray = getAsJsonArray;
/**
 * Gets an `AnyJson` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {AnyJson}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureAnyJson(json, path) {
    return ensureAnyJson(getAsAnyJson(json, path));
}
exports.getEnsureAnyJson = getEnsureAnyJson;
/**
 * Gets a `string` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {string}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureString(json, path) {
    return ensureString(getAsAnyJson(json, path));
}
exports.getEnsureString = getEnsureString;
/**
 * Gets a `number` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {number}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureNumber(json, path) {
    return ensureNumber(getAsAnyJson(json, path));
}
exports.getEnsureNumber = getEnsureNumber;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {boolean}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureBoolean(json, path) {
    return ensureBoolean(getAsAnyJson(json, path));
}
exports.getEnsureBoolean = getEnsureBoolean;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {JsonMap}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureJsonMap(json, path) {
    return ensureJsonMap(getAsAnyJson(json, path));
}
exports.getEnsureJsonMap = getEnsureJsonMap;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param {JsonMap} json The `JsonMap` to query.
 * @param {Many<string>} path The query path.
 * @returns {JsonArray}
 * @throws {UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 * @see {@link https://lodash.com/docs/latest#get}
 */
function getEnsureJsonArray(json, path) {
    return ensureJsonArray(getAsAnyJson(json, path));
}
exports.getEnsureJsonArray = getEnsureJsonArray;
/**
 * Indicates that the a type-narrowing mismatch for the given value.
 */
class UnexpectedValueTypeError extends internal_1.NamedError {
    constructor(message) {
        super('UnexpectedValueTypeError', message);
    }
}
exports.UnexpectedValueTypeError = UnexpectedValueTypeError;
//# sourceMappingURL=narrowing.js.map
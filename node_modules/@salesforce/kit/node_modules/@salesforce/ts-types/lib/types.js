"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * An object with arbitrary string-indexed values of a generic type.
 * `T` defaults to `any` when not explicitly supplied.
 *
 * @typedef {Object<string, T>} Dictionary<T>
 */
/**
 * An object with `Optional` string-indexed values of a parameterized type `T`.
 *
 * @typedef {Dictionary<Optional<T>>} OptionalDictionary
 */
/**
 * Any object with both a numeric index signature and a numeric `length` property.
 *
 * @typedef ArrayLike
 */
/**
 * Any valid JSON primitive value.
 *
 * @typedef {boolean|number|string|null} JsonPrimitive
 */
/**
 * Any valid JSON value.
 *
 * @typedef {JsonPrimitive|JsonArray|JsonMap} AnyJson
 */
/**
 * Any JSON-compatible object.
 *
 * @typedef {Dictionary<AnyJson>} JsonMap
 */
/**
 * Any JSON-compatible array.
 *
 * @typedef {Array<AnyJson>} JsonArray
 */
/**
 * A union type for either the parameterized type `T` or `undefined`.
 *
 * @typedef {T|undefined} Optional<T>
 */
/**
 * A union type for either the parameterized type `T` or an array of `T`.
 *
 * @typedef {T|T[]} Many<T>
 */
/**
 * A union type of `string | number | symbol`, representing all possible types for object property keys.
 *
 * @typedef PropertyKey
 */
/**
 * Any `function` returning type `T`. `T` defaults to `any` when not explicitly supplied.
 *
 * @typedef {function} AnyFunction<T> `(...args: any[]) => T`
 */
/**
 * A constructor for any type `T`. `T` defaults to `{}` when not explicitly supplied.
 *
 * @typedef {function} AnyConstructor<T> `new (...args: any[]) => T`
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map
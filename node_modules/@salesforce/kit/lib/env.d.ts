import { Optional, OptionalDictionary } from '@salesforce/ts-types';
/**
 * An injectable abstraction on top of `process.env` with various convenience functions
 * for accessing environment variables of different anticipated shapes.
 */
export declare class Env {
    private store;
    constructor(store?: OptionalDictionary<string>);
    /**
     * Gets a `string` value for a given key.
     *
     * @param {string} key The name of the envar.
     * @return {Optional<string>}
     */
    getString(key: string): string | undefined;
    /**
     * Gets a `string` value for a given key.
     *
     * @param {string} key The name of the envar.
     * @param {string} [def] A default value.
     * @return {string}
     */
    getString(key: string, def: string): string;
    /**
     * Gets a `string` value from a finite set of expected values.
     *
     * @param {string} key The name of the envar.
     * @param {string[]} set The finite set of expected values.
     * @return {Optional<string>}
     */
    getStringFrom(key: string, set: string[]): Optional<string>;
    /**
     * Gets a `string` value from a finite set of expected values.
     *
     * @param {string} key The name of the envar.
     * @param {string[]} set The finite set of expected values.
     * @param {string} [def] A default value.
     * @return {string}
     * @throws {InvalidDefaultEnvValueError} If the provided default value is not a member of the expected set.
     */
    getStringFrom(key: string, set: string[], def: string): string;
    /**
     * Sets a `string` value for a given key, or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<string>} value The value to set.
     */
    setString(key: string, value?: string): void;
    /**
     * Gets a list of `string` values for a given key by splitting the raw value on `,` chars.
     *
     * @param {string} key The name of the envar.
     * @return {Optional<string[]>}
     */
    getList(key: string): Optional<string[]>;
    /**
     * Gets a list of `string` values for a given key by splitting the raw value on `,` chars.
     *
     * @param {string} key The name of the envar.
     * @param {string} [def] A default list of values.
     * @return {string[]}
     */
    getList(key: string, def: string[]): string[];
    /**
     * Sets a `string` value from a list for a given key by joining values with a `,` into a raw `string` value,
     * or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<string[]>} values The values to set.
     */
    setList(key: string, values: string[]): void;
    /**
     * Gets a `boolean` value for a given key.  Returns the default value if no value was found.
     *
     * @param {string} key The name of the envar.
     * @param {boolean} [def] A default boolean, which itself defaults to `false` if not otherwise supplied.
     */
    getBoolean(key: string, def?: boolean): boolean;
    /**
     * Sets a `boolean` value for a given key, or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<boolean>} value The value to set.
     */
    setBoolean(key: string, value: boolean): void;
    /**
     * Unsets a value for a given key.
     *
     * @param {string} key The name of the envar.
     */
    unset(key: string): void;
}
/**
 * The default `Env` instance, which wraps `process.env`.
 */
export declare const env: Env;

"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
/**
 * An injectable abstraction on top of `process.env` with various convenience functions
 * for accessing environment variables of different anticipated shapes.
 */
class Env {
    constructor(store = (process && process.env) || {}) {
        this.store = store;
        this.store = store;
    }
    // underlying method
    getString(key, def) {
        return this.store[key] || def;
    }
    // underlying method
    getStringFrom(key, set, def) {
        if (def && !set.includes(def)) {
            throw new errors_1.InvalidDefaultEnvValueError(`${def} is not a member of ${set}`);
        }
        const value = this.getString(key);
        if (!value)
            return def;
        return set.includes(value) ? value : def;
    }
    /**
     * Sets a `string` value for a given key, or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<string>} value The value to set.
     */
    setString(key, value) {
        if (value == null) {
            this.unset(key);
            return;
        }
        this.store[key] = value;
    }
    // underlying method
    getList(key, def) {
        const value = this.getString(key);
        return value ? value.split(',') : def || [];
    }
    /**
     * Sets a `string` value from a list for a given key by joining values with a `,` into a raw `string` value,
     * or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<string[]>} values The values to set.
     */
    setList(key, values) {
        if (values == null) {
            this.unset(key);
            return;
        }
        this.setString(key, values.join(','));
    }
    /**
     * Gets a `boolean` value for a given key.  Returns the default value if no value was found.
     *
     * @param {string} key The name of the envar.
     * @param {boolean} [def] A default boolean, which itself defaults to `false` if not otherwise supplied.
     */
    getBoolean(key, def = false) {
        const value = this.getString(key, def.toString());
        return value.toLowerCase() === 'true' || value === '1';
    }
    /**
     * Sets a `boolean` value for a given key, or removes the current value when no value is given.
     *
     * @param {string} key The name of the envar.
     * @param {Optional<boolean>} value The value to set.
     */
    setBoolean(key, value) {
        this.setString(key, value.toString());
    }
    /**
     * Unsets a value for a given key.
     *
     * @param {string} key The name of the envar.
     */
    unset(key) {
        delete this.store[key];
    }
}
exports.Env = Env;
/**
 * The default `Env` instance, which wraps `process.env`.
 */
exports.env = new Env();
//# sourceMappingURL=env.js.map
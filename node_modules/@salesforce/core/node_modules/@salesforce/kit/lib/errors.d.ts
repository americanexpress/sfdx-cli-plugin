/**
 * Any `Error` compatible with the `NamedError` type signature.
 */
declare type NamedErrorLike = Error & {
    readonly name: string;
    readonly cause?: NamedErrorLike;
    readonly fullStack?: string;
};
export declare class NamedError extends Error {
    readonly name: string;
    readonly cause?: NamedErrorLike;
    constructor(name: string, cause?: NamedErrorLike);
    constructor(name: string, message?: string, cause?: NamedErrorLike);
    readonly fullStack: string | undefined;
}
export declare class JsonParseError extends NamedError {
    readonly path?: string | undefined;
    readonly line?: number | undefined;
    readonly errorPortion?: string | undefined;
    static create(error: Error, data: string, jsonPath?: string): JsonParseError;
    private static format;
    constructor(cause: Error, path?: string | undefined, line?: number | undefined, errorPortion?: string | undefined);
}
export declare class JsonStringifyError extends NamedError {
    constructor(cause: Error);
}
export declare class JsonDataFormatError extends NamedError {
    constructor(message: string);
}
export declare class InvalidDefaultEnvValueError extends NamedError {
    constructor(message: string);
}
export {};

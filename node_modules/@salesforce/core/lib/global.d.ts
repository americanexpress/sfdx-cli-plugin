/**
 * Represents an environment mode.  Supports `production`, `development`, `demo`, and `test`
 * with the default mode being `production`.
 *
 * To set the mode, `export SFDX_ENV=<mode>` in your current environment.
 * @typedef Mode
 * @property {string} PRODUCTION
 * @property {string} DEVELOPMENT
 * @property {string} DEMO
 * @property {string} TEST
 */
export declare enum Mode {
    PRODUCTION = "production",
    DEVELOPMENT = "development",
    DEMO = "demo",
    TEST = "test"
}
/**
 * Global constants, methods, and configuration.
 */
export declare class Global {
    /**
     * The global folder in which state is stored.
     */
    static readonly STATE_FOLDER: string;
    /**
     * The full system path to the global state folder.
     *
     * @see Global.STATE_FOLDER
     */
    static readonly DIR: string;
    /**
     * The full system path to the global log file.
     */
    static readonly LOG_FILE_PATH: string;
    /**
     * Gets the current mode environment variable as a {@link Mode} instance.
     *
     * @example
     * console.log(Global.getEnvironmentMode() === Mode.PRODUCTION);
     *
     * @returns {Mode}
     */
    static getEnvironmentMode(): Mode;
    /**
     * Creates a directory within {@link Global.DIR}, or {@link Global.DIR} itself if the `dirPath` param
     * is not provided.
     *
     * @param {string} [dirPath] The directory path to be created within {@link Global.DIR}.
     * @returns {Promise<void>} Resolved or rejected when the directory creation operation has completed.
     */
    static createDir(dirPath?: string): Promise<void>;
}

"use strict";
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kit_1 = require("@salesforce/kit");
const os = require("os");
const path = require("path");
const fs = require("./util/fs");
/**
 * Represents an environment mode.  Supports `production`, `development`, `demo`, and `test`
 * with the default mode being `production`.
 *
 * To set the mode, `export SFDX_ENV=<mode>` in your current environment.
 * @typedef Mode
 * @property {string} PRODUCTION
 * @property {string} DEVELOPMENT
 * @property {string} DEMO
 * @property {string} TEST
 */
var Mode;
(function (Mode) {
    Mode["PRODUCTION"] = "production";
    Mode["DEVELOPMENT"] = "development";
    Mode["DEMO"] = "demo";
    Mode["TEST"] = "test";
})(Mode = exports.Mode || (exports.Mode = {}));
/**
 * Global constants, methods, and configuration.
 */
class Global {
    /**
     * Gets the current mode environment variable as a {@link Mode} instance.
     *
     * @example
     * console.log(Global.getEnvironmentMode() === Mode.PRODUCTION);
     *
     * @returns {Mode}
     */
    static getEnvironmentMode() {
        return Mode[kit_1.env.getKeyOf('SFDX_ENV', Mode, Mode.PRODUCTION, value => value.toUpperCase())];
    }
    /**
     * Creates a directory within {@link Global.DIR}, or {@link Global.DIR} itself if the `dirPath` param
     * is not provided.
     *
     * @param {string} [dirPath] The directory path to be created within {@link Global.DIR}.
     * @returns {Promise<void>} Resolved or rejected when the directory creation operation has completed.
     */
    static async createDir(dirPath) {
        dirPath = dirPath ? path.join(Global.DIR, dirPath) : Global.DIR;
        await fs.mkdirp(dirPath, fs.DEFAULT_USER_DIR_MODE);
    }
}
/**
 * The global folder in which state is stored.
 */
Global.STATE_FOLDER = '.sfdx';
/**
 * The full system path to the global state folder.
 *
 * @see Global.STATE_FOLDER
 */
Global.DIR = path.join(os.homedir(), Global.STATE_FOLDER);
/**
 * The full system path to the global log file.
 */
Global.LOG_FILE_PATH = path.join(Global.DIR, 'sfdx.log');
exports.Global = Global;
//# sourceMappingURL=global.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const os_1 = require("os");
const authInfo_1 = require("./authInfo");
const connection_1 = require("./connection");
const logger_1 = require("./logger");
const messages_1 = require("./messages");
const permissionSetAssignment_1 = require("./permissionSetAssignment");
const secureBuffer_1 = require("./secureBuffer");
const sfdxError_1 = require("./sfdxError");
const sfdc_1 = require("./util/sfdc");
const PASSWORD_LENGTH = 10;
const LOWER = 'abcdefghijklmnopqrstuvwxyz';
const UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const NUMBERS = '1234567890';
const SYMBOLS = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '[', ']', '|', '-'];
const ALL = [LOWER, UPPER, NUMBERS, SYMBOLS.join('')];
const rand = (len) => Math.floor(Math.random() * len.length);
const scimEndpoint = '/services/scim/v1/Users';
const scimHeaders = { 'auto-approve-user': 'true' };
/**
 * A Map of Required Salesforce User fields.
 */
exports.REQUIRED_FIELDS = {
    id: 'id',
    username: 'username',
    lastName: 'lastName',
    alias: 'alias',
    timeZoneSidKey: 'timeZoneSidKey',
    localeSidKey: 'localeSidKey',
    emailEncodingKey: 'emailEncodingKey',
    profileId: 'profileId',
    languageLocaleKey: 'languageLocaleKey',
    email: 'email'
};
/**
 * Helper method to lookup UserFields
 * @param {string} username The username
 */
async function _retrieveUserFields(username) {
    const connection = await connection_1.Connection.create(await authInfo_1.AuthInfo.create(username));
    const fromFields = Object.keys(exports.REQUIRED_FIELDS).map(value => ts_types_1.ensure(kit_1.upperFirst(value)));
    const requiredFieldsFromAdminQuery = `SELECT ${fromFields} FROM User WHERE Username='${username}'`;
    const result = await connection.query(requiredFieldsFromAdminQuery);
    this.logger.debug('Successfully retrieved the admin user for this org.');
    if (result.totalSize === 1) {
        const results = kit_1.mapKeys(result.records[0], (value, key) => kit_1.lowerFirst(key));
        const fields = {
            id: kit_1.get(results, exports.REQUIRED_FIELDS.id),
            username,
            alias: kit_1.get(results, exports.REQUIRED_FIELDS.alias),
            email: kit_1.get(results, exports.REQUIRED_FIELDS.email),
            emailEncodingKey: kit_1.get(results, exports.REQUIRED_FIELDS.emailEncodingKey),
            languageLocaleKey: kit_1.get(results, exports.REQUIRED_FIELDS.languageLocaleKey),
            localeSidKey: kit_1.get(results, exports.REQUIRED_FIELDS.localeSidKey),
            profileId: kit_1.get(results, exports.REQUIRED_FIELDS.profileId),
            lastName: kit_1.get(results, exports.REQUIRED_FIELDS.lastName),
            timeZoneSidKey: kit_1.get(results, exports.REQUIRED_FIELDS.timeZoneSidKey)
        };
        return fields;
    }
    else {
        throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'userQueryFailed', [username]);
    }
}
/**
 * Gets the profile id associated with a profile name.
 * @param {string} name The name of the profile.
 * @param {Connection} connection The connection for the query.
 */
async function _retrieveProfileId(name, connection) {
    if (!sfdc_1.validateSalesforceId(name)) {
        const profileQuery = `SELECT Id FROM Profile WHERE name='${name}'`;
        const result = await connection.query(profileQuery);
        if (result.records.length > 0) {
            return result.records[0].Id;
        }
    }
    return name;
}
/**
 * Provides a default set of fields values that can be used to create a user. This is handy for
 * software development purposes.
 *
 * @example
 * const fields: UserFields = await DefaultUserFields.init(org);
 */
class DefaultUserFields {
    /**
     * Constructor
     * @param {string} [username] The login username for User
     */
    constructor(username) {
        this.id = '';
        this.username = `${Date.now()}_${username}`;
    }
    /**
     * Used to initialize default values for fields based on a templateUser user. This user will be part of the
     * Standard User profile.
     * @param {string} templateUser The user to base the new user on. It's assumed the template user exists on the org already.
     * @param {string} [newUserName] The name for the new user.
     */
    static async init(templateUser, newUserName) {
        const fields = new DefaultUserFields(newUserName);
        const initLogger = await logger_1.Logger.child('DefaultUserFields');
        const userFields = await _retrieveUserFields.call({ logger: initLogger }, templateUser);
        kit_1.merge(fields, userFields);
        fields.profileId = await _retrieveProfileId('Standard User', await connection_1.Connection.create(await authInfo_1.AuthInfo.create(templateUser)));
        initLogger.debug(`Standard User profileId: ${fields.profileId}`);
        if (newUserName) {
            fields.username = newUserName;
        }
        else {
            fields.username = `${Date.now()}_${fields.username}`;
        }
        return fields;
    }
}
exports.DefaultUserFields = DefaultUserFields;
/**
 * A class for creating a User, generating a password for a user, and assigning a user to one or more permission sets.
 * See methods for examples.
 */
class User {
    /**
     * Initialize a new instance of a user.
     * @param {Org} org The org associated with the user.
     * @returns {User} A user instance
     */
    static async init(org) {
        if (!org) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'orgRequired');
        }
        const logger = await logger_1.Logger.child('User');
        await org.refreshAuth();
        logger.debug('Auth refresh ok');
        return new User(org, logger);
    }
    /**
     * Generate default password for a user.
     * @returns {SecureBuffer} An encrypted buffer containing a utf8 encoded password.
     */
    static generatePasswordUtf8() {
        // Fill an array with random characters from random requirement sets
        const pass = Array(PASSWORD_LENGTH - ALL.length).fill(9).map(() => {
            const _set = ALL[rand(ALL)];
            return _set[rand(_set)];
        });
        const secureBuffer = new secureBuffer_1.SecureBuffer();
        secureBuffer.consume(Buffer.from(pass.join(''), 'utf8'));
        return secureBuffer;
    }
    constructor(org, logger) {
        this.org = org;
        this.logger = logger;
    }
    /**
     * Assigns a password to a user. For a user to have the ability to assign their own password, the org needs the
     * following org preference: SelfSetPasswordInApi
     * @param {AuthInfo} info The AuthInfo object for user to assign the password to.
     * @param {SecureBuffer} password [throwWhenRemoveFails = User.generatePasswordUtf8()] A SecureBuffer containing the new password.
     */
    async assignPassword(info, password = User.generatePasswordUtf8()) {
        this.logger.debug(`Attempting to set password for userId: ${info.getFields().userId} username: ${info.getFields().username}`);
        const userConnection = await connection_1.Connection.create(info);
        return new Promise((resolve, reject) => {
            password.value(async (buffer) => {
                try {
                    // @ts-ignore TODO: expose `soap` on Connection however appropriate
                    const soap = userConnection.soap;
                    await soap.setPassword(info.getFields().userId, buffer.toString('utf8'));
                    this.logger.debug(`Set password for userId: ${info.getFields().userId}`);
                    resolve();
                }
                catch (e) {
                    reject(e);
                }
            });
        });
    }
    /**
     * Methods to assign one or more permission set names to a user.
     * @param {string} id The Salesforce id of the user to assign the permission set to.
     * @param {string[]} permsetNames An array of permission set names.
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('standardUser')));
     * const user: User = await User.init(org)
     * const fields: UserFields = await user.retrieve();
     * await user.assignPermissionSets(fields.id, ['sfdx', 'approver']);
     */
    async assignPermissionSets(id, permsetNames) {
        if (!id) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'missingId');
        }
        if (!permsetNames) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'permsetNamesAreRequired');
        }
        const assignments = await permissionSetAssignment_1.PermissionSetAssignment.init(this.org);
        for (const permsetName of permsetNames) {
            await assignments.create(id, permsetName);
        }
    }
    /**
     * Method for creating a new User.
     *
     * By default scratch orgs only allow creating 2 additional users. Work with Salesforce Customer Service to increase
     * user limits.
     *
     * The Org Preferences required to increase the number of users are:
     * Standard User Licenses
     * Salesforce CRM Content User
     *
     * @param {UserFields} fields The required fields for creating a user.
     * @returns {Promise<AuthInfo>} An AuthInfo object for the new user.
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('fooUser')));
     * const fields: UserFields = await DefaultUserFields.init(org);
     * const user: User = await User.init(org);
     * const info: AuthInfo = await user.create(fields);
     */
    async create(fields) {
        // Create a user and get a refresh token
        const refreshTokenSecret = await this.createUserInternal(fields);
        // Create the initial auth info
        const adminUserAuthFields = this.org.getConnection().getAuthInfoFields();
        // Setup oauth options for the new user
        const oauthOptions = {
            loginUrl: adminUserAuthFields.loginUrl,
            refreshToken: refreshTokenSecret.buffer.value((buffer) => buffer.toString('utf8')),
            clientId: adminUserAuthFields.clientId,
            clientSecret: adminUserAuthFields.clientSecret,
            privateKey: adminUserAuthFields.privateKey
        };
        // Create an auth info object for the new user
        const newUserAuthInfo = await authInfo_1.AuthInfo.create(fields.username, oauthOptions);
        // Update the auth info object with created user id.
        const newUserAuthFields = newUserAuthInfo.getFields();
        newUserAuthFields.userId = refreshTokenSecret.userId;
        // Make sure we can connect and if so save the auth info.
        await this.describeUserAndSave(newUserAuthInfo);
        // Let the org know there is a new user. See $HOME/.sfdx/[orgid].json for the mapping.
        await this.org.addUsername(newUserAuthInfo);
        return newUserAuthInfo;
    }
    /**
     * Method to retrieve the UserFields for a user.
     * @param {string} username The username of the user
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('fooUser')));
     * const user: User = await User.init(org);
     * const fields: UserFields = await user.retrieve('boris@thecat.com')
     */
    async retrieve(username) {
        return await _retrieveUserFields.call(this, username);
    }
    /**
     * Helper method that verifies the server's User object is available and if so allows persisting the Auth information.
     * @param {AuthInfo} newUserAuthInfo The AuthInfo for the new user.
     */
    async describeUserAndSave(newUserAuthInfo) {
        const connection = await connection_1.Connection.create(newUserAuthInfo);
        this.logger.debug(`Created connection for user: ${newUserAuthInfo.getUsername()}`);
        const userDescribe = await connection.describe('User');
        if (userDescribe && userDescribe.fields) {
            await newUserAuthInfo.save();
            return newUserAuthInfo;
        }
        else {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'problemsDescribingTheUserObject');
        }
    }
    /**
     * Helper that makes a REST request to create the user, and update additional required fields.
     * @param {UserFields} fields The configuration the new user should have.
     */
    async createUserInternal(fields) {
        if (!fields) {
            throw sfdxError_1.SfdxError.create('@salesforce/core', 'user', 'missingFields');
        }
        const body = JSON.stringify({
            username: fields.username,
            emails: [fields.email],
            name: {
                familyName: fields.lastName
            },
            nickName: fields.username.substring(0, 40),
            entitlements: [{
                    value: fields.profileId
                }]
        });
        this.logger.debug(`user create request body: ${body}`);
        const scimUrl = this.org.getConnection().normalizeUrl(scimEndpoint);
        this.logger.debug(`scimUrl: ${scimUrl}`);
        const info = {
            method: 'POST',
            url: scimUrl,
            headers: scimHeaders,
            body
        };
        const response = await this.org.getConnection().requestRaw(info);
        const responseBody = kit_1.parseJsonMap(ts_types_1.ensureString(response['body']));
        const statusCode = ts_types_1.asNumber(response.statusCode);
        this.logger.debug(`user create response.statusCode: ${response.statusCode}`);
        if (!(statusCode === 201 || statusCode === 200)) {
            const messages = messages_1.Messages.loadMessages('@salesforce/core', 'user');
            let message = messages.getMessage('invalidHttpResponseCreatingUser', [statusCode]);
            if (responseBody) {
                const errors = ts_types_1.asJsonArray(responseBody.Errors);
                if (errors && errors.length > 0) {
                    message = `${message} causes:${os_1.EOL}`;
                    errors.forEach(singleMessage => {
                        if (!ts_types_1.isJsonMap(singleMessage))
                            return;
                        message = `${message}${os_1.EOL}${singleMessage.description}`;
                    });
                }
            }
            this.logger.debug(message);
            throw new sfdxError_1.SfdxError(message, 'UserCreateHttpError');
        }
        fields.id = ts_types_1.ensureString(responseBody.id);
        await this.updateRequiredUserFields(fields);
        const buffer = new secureBuffer_1.SecureBuffer();
        const headers = ts_types_1.ensureJsonMap(response.headers);
        const autoApproveUser = ts_types_1.ensureString(headers['auto-approve-user']);
        buffer.consume(Buffer.from(autoApproveUser));
        return {
            buffer,
            userId: fields.id
        };
    }
    /**
     * Update the remaining required fields for the user.
     * @param {UserFields} fields The fields for the user.
     */
    async updateRequiredUserFields(fields) {
        const leftOverRequiredFields = kit_1.omit(fields, [
            exports.REQUIRED_FIELDS.username, exports.REQUIRED_FIELDS.email, exports.REQUIRED_FIELDS.lastName, exports.REQUIRED_FIELDS.profileId
        ]);
        const object = kit_1.mapKeys(leftOverRequiredFields, (value, key) => kit_1.upperFirst(key));
        await this.org.getConnection().sobject('User').update(object);
        this.logger.debug(`Successfully Updated additional properties for user: ${fields.username}`);
    }
}
exports.User = User;
//# sourceMappingURL=user.js.map
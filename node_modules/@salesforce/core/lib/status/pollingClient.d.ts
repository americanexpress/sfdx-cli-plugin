import { Logger } from '../logger';
import { Time } from '../util/time';
import { StatusResult } from './client';
/**
 * Options for the polling client.
 * @interface
 */
export interface PollingOptions<T> {
    poll: () => Promise<StatusResult<T>>;
    frequency: Time;
    timeout: Time;
}
/**
 * Default options set for polling. The default options specify a timeout of 3 minutes and polling frequency of 15
 * seconds;
 */
export declare class DefaultPollingOptions<T> implements PollingOptions<T> {
    frequency: Time;
    poll: () => Promise<StatusResult<T>>;
    timeout: Time;
    /**
     * constructor
     * @param {function} poll The function used for polling status.
     * @see StatusResult
     */
    constructor(poll: () => Promise<StatusResult<T>>);
}
/**
 * This is a polling client that can be used to poll the status of long running tasks. It can be used as a replacement
 * for Streaming when streaming topics are not available or when streaming handshakes are failing. Why wouldn't you
 * want to use this? It can impact Salesforce API usage.
 *
 * @example
 *  const options: PollingOptions<string> = {
 *
 *      async poll(): Promise<StatusResult<string>>  {
 *          return Promise.resolve(doSoqlQuery();
 *      },
 *      frequency: new Time(10, TIME_UNIT.MILLISECONDS),
 *      timeout: new Time(1, TIME_UNIT.MINUTES)
 *  };
 *
 *  const client = new PollingClient(options);
 *
 *  const pollResult: string = await client.subscribe();
 *
 *  // do Something with pollResult
 *  ...
 */
export declare class PollingClient<T> {
    /**
     * Initialize and return a polling client.
     *
     * @param {PollingOptions<U>} options Polling options.
     * @returns {Promise<PollingClient<U>>}
     * @see {@link PollingOptions}
     * @see {@link DefaultPollingOptions}
     * @async
     */
    static init<U>(options: PollingOptions<U>): Promise<PollingClient<U>>;
    protected logger: Logger;
    private options;
    private timeout?;
    private interval?;
    /**
     * Constructor
     * @param {PollingOptions<T>} options Polling client options
     * @param {Logger} logger Internal logging instace
     * @see {@link PollingClient.init}
     */
    protected constructor(options: PollingOptions<T>, logger: Logger);
    /**
     * Returns a promise to call the specified polling function using the interval and timeout specified
     * in the polling options.
     * @returns {Promise<T>} A promise to call the specified polling function using the interval and timeout specified
     * in the polling options.
     * @async
     */
    subscribe(): Promise<T>;
    private clearAll;
}

/**
 * @module fs
 */
/// <reference types="node" />
import { AnyJson, JsonMap, Optional } from '@salesforce/ts-types';
import * as fs from 'fs';
/**
 * The default file system mode to use when creating directories.
 */
export declare const DEFAULT_USER_DIR_MODE = "700";
/**
 * The default file system mode to use when creating files.
 */
export declare const DEFAULT_USER_FILE_MODE = "600";
/**
 * A convenience reference to {@link https://nodejs.org/api/fs.html#fs_fs_constants}
 * to reduce the need to import multiple `fs` modules.
 */
export declare const constants: typeof fs.constants;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback|fs.readFile}.
 *
 * @function readFile
 * @returns {Promise<string>|Promise<Buffer>|Promise<string|Buffer>}
 */
export declare const readFile: typeof fs.readFile.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback|fs.readdir}.
 *
 * @function readdir
 * @returns {Promise<Array<string>>|Promise<Array<Buffer>>|Promise<Array<string|Buffer>>}
 */
export declare const readdir: typeof fs.readdir.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback|fs.writeFile}.
 *
 * @function writeFile
 * @returns {Promise<void>}
 */
export declare const writeFile: typeof fs.writeFile.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback|fs.access}.
 *
 * @function access
 * @returns {Promise<void>}
 */
export declare const access: typeof fs.access.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback|fs.open}.
 *
 * @function open
 * @returns {Promise<number>}
 */
export declare const open: typeof fs.open.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback|fs.unlink}.
 *
 * @function unlink
 * @returns {Promise<void>}
 */
export declare const unlink: typeof fs.unlink.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback|fs.rmdir}.
 *
 * @function rmdir
 * @returns {Promise<void>}
 */
export declare const rmdir: typeof fs.rmdir.__promisify__;
/**
 * Promisified version of {@link https://nodejs.org/api/fs.html#fs_fs_fstat_fd_callback|fs.stat}.
 *
 * @function stat
 * @returns {Promise<fs.Stats>}
 */
export declare const stat: typeof fs.stat.__promisify__;
/**
 * Promisified version of {@link https://npmjs.com/package/mkdirp|mkdirp}.
 *
 * @function mkdirp
 * @returns {Promise<void>}
 */
export declare const mkdirp: (folderPath: string, mode?: string | object) => Promise<void>;
/**
 * Deletes a folder recursively, removing all descending files and folders.
 *
 * @param {string} dirPath The path to remove.
 * @returns {Promise<void>}
 * @throws {SfdxError}
 *    **`{name: 'PathIsNullOrUndefined'}`** The path is not defined.
 * @throws {SfdxError}
 *    **`{name: 'DirMissingOrNoAccess'}`** The folder or any sub-folder is missing or has no access.
 */
export declare function remove(dirPath: string): Promise<void>;
/**
 * Searches a file path in an ascending manner (until reaching the filesystem root) for the first occurrence a
 * specific file name.  Resolves with the directory path containing the located file, or `null` if the file was
 * not found.
 *
 * @param {string} dir The directory path in which to start the upward search.
 * @param {string} file The file name to look for.
 * @returns {Promise<Optional<string>>}
 */
export declare function traverseForFile(dir: string, file: string): Promise<Optional<string>>;
/**
 * Read a file and convert it to JSON.
 *
 * @param {string} jsonPath The path of the file.
 * @param {boolean} [throwOnEmpty] Whether to throw an error if the JSON file is empty.
 * @return {Promise<AnyJson>} The contents of the file as a JSON object.
 */
export declare function readJson(jsonPath: string, throwOnEmpty?: boolean): Promise<AnyJson>;
/**
 * Read a file and convert it to JSON, throwing an error if the parsed contents are not a `JsonMap`.
 *
 * @param {string} jsonPath The path of the file.
 * @param {boolean} [throwOnEmpty] Whether to throw an error if the JSON file is empty.
 * @return {Promise<JsonMap>} The contents of the file as a JSON object.
 */
export declare function readJsonMap(jsonPath: string, throwOnEmpty?: boolean): Promise<JsonMap>;
/**
 * Convert a JSON-compatible object to a `string` and write it to a file.
 *
 * @param {string} jsonPath The path of the file to write.
 * @param {object} data The JSON object to write.
 * @return {Promise<void>}
 */
export declare function writeJson(jsonPath: string, data: AnyJson): Promise<void>;

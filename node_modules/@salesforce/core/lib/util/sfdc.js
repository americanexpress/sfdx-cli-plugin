"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * @module sfdc
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const url_1 = require("url");
/**
 * Returns `true` if a provided URL contains a Salesforce owned domain.
 *
 * @param {string} urlString The URL to inspect.
 * @returns {boolean}
 */
function isSalesforceDomain(urlString) {
    let url;
    try {
        url = new url_1.URL(urlString);
    }
    catch (e) {
        return false;
    }
    // Source https://help.salesforce.com/articleView?id=000003652&type=1
    const whitelistOfSalesforceDomainPatterns = [
        '.content.force.com',
        '.force.com',
        '.salesforce.com',
        '.salesforceliveagent.com',
        '.secure.force.com'
    ];
    const whitelistOfSalesforceHosts = [
        'developer.salesforce.com',
        'trailhead.salesforce.com'
    ];
    return whitelistOfSalesforceDomainPatterns.some(pattern => {
        return url.hostname.endsWith(pattern) || whitelistOfSalesforceHosts.includes(url.hostname);
    });
}
exports.isSalesforceDomain = isSalesforceDomain;
/**
 * Converts an 18 character Salesforce ID to 15 characters.
 *
 * @param {string} id The id to convert.
 * @return {Optional<string>}
 */
function trimTo15(id) {
    if (id && id.length && id.length > 15) {
        id = id.substring(0, 15);
    }
    return id;
}
exports.trimTo15 = trimTo15;
/**
 * Tests whether an API version matches the format `i.0`.
 *
 * @param value The API version as a string.
 * @returns {boolean}
 */
function validateApiVersion(value) {
    return value == null || /[1-9]\d\.0/.test(value);
}
exports.validateApiVersion = validateApiVersion;
/**
 * Tests whether an email matches the format `me@my.org`
 *
 * @param value The email as a string.
 * @returns {boolean}
 */
function validateEmail(value) {
    return /^[^.][^@]*@[^.]+(\.[^.\s]+)+$/.test(value);
}
exports.validateEmail = validateEmail;
/**
 * Tests whether a Salesforce ID is in the correct format, a 15- or 18-character length string with only letters and numbers
 * @param value The ID as a string.
 * @returns {boolean}
 */
function validateSalesforceId(value) {
    return /[a-zA-Z0-9]{18}|[a-zA-Z0-9]{15}/.test(value) && (value.length === 15 || value.length === 18);
}
exports.validateSalesforceId = validateSalesforceId;
/**
 * Tests whether a path is in the correct format; the value doesn't include the characters "[", "]", "?", "<", ">", "?", "|"
 * @param value The path as a string.
 * @returns {boolean}
 */
function validatePathDoesNotContainInvalidChars(value) {
    return !/[\[:"\?<>\|\]]+/.test(value);
}
exports.validatePathDoesNotContainInvalidChars = validatePathDoesNotContainInvalidChars;
/**
 * Returns the first key within the object that has an upper case first letter.
 *
 * @param {JsonMap} data The object in which to check key casing.
 * @returns {Optional<string>}
 */
function findUpperCaseKeys(data) {
    let key;
    kit_1.findKey(data, (val, k) => {
        if (k[0] === k[0].toUpperCase()) {
            key = k;
        }
        else if (ts_types_1.isJsonMap(val)) {
            key = findUpperCaseKeys(ts_types_1.asJsonMap(val));
        }
        return key;
    });
    return key;
}
exports.findUpperCaseKeys = findUpperCaseKeys;
//# sourceMappingURL=sfdc.js.map
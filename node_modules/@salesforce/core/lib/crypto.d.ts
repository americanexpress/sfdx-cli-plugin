import { Optional } from '@salesforce/ts-types';
export declare class Crypto {
    private keyChain?;
    static create(): Promise<Crypto>;
    private _key;
    private messages;
    private noResetOnClose;
    constructor(keyChain?: import("./keyChainImpl").KeychainAccess | import("./keyChainImpl").GenericUnixKeychainAccess | import("./keyChainImpl").GenericWindowsKeychainAccess | undefined);
    /**
     * Initialize any crypto dependencies. In this case we need to generate an encryption key.
     *
     * @param retryStatus A string message to track retries.
     * @returns {Promise<Crypto>}
     */
    init(retryStatus?: string, platform?: string, noResetOnClose?: boolean): Promise<Crypto>;
    /**
     * Encrypts text.
     *
     * @param {string} [text] The text to encrypt.
     * @returns {Optional<string>} The encrypted string or undefined if no string was passed.
     */
    encrypt(text?: string): Optional<string>;
    /**
     * Decrypts text.
     * @param {string} [text] The text to decrypt.
     * @returns {Optional<string>} If enableTokenEncryption is set to false or not defined in package.json then the text
     * is simply returned. The text is then assumed to be unencrypted.
     */
    decrypt(text?: string): Optional<string>;
    close(): void;
    private getKeyChain;
}

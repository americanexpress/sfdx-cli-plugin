import { ConfigFile, ConfigOptions } from './configFile';
import { ConfigGroup, ConfigGroupOptions } from './configGroup';
/**
 * Different groups of aliases. Currently only support orgs.
 * @typedef AliasGroup
 * @property {string} ORGS
 */
export declare enum AliasGroup {
    ORGS = "orgs"
}
/**
 * Aliases specify alternate names for groups of properties used by the Salesforce CLI, such as orgs.
 * By default, all aliases are stored under 'orgs', but groups allow aliases to be applied for
 * other commands, settings, and parameters.
 *
 * **Note:** All aliases are stored at the global level.
 *
 * @extends ConfigGroup
 *
 * @example
 * const aliases = await Aliases.retrieve<Aliases>();
 * aliases.set('myAlias', 'username@company.org');
 * await aliases.write();
 *
 * // Shorthand to get an alias.
 * const username: string = await Aliases.fetch('myAlias');
 * @see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_usernames_orgs.htm
 */
export declare class Aliases extends ConfigGroup {
    /**
     * The aliases state file filename.
     * @override
     * @returns {string}
     */
    static getFileName(): string;
    /**
     * Get Aliases specific options.
     * @returns {ConfigGroupOptions}
     */
    static getOptions(): ConfigGroupOptions;
    /**
     * Overrides {@link ConfigFile.create} to pass in {@link Aliases.getOptions}.
     * @override
     * @param {ConfigOptions} options
     * @see {@link ConfigFile.create}
     * @returns {Promise<T>}
     */
    static create<T extends ConfigFile>(options: ConfigOptions): Promise<T>;
    /**
     * Overrides {@link ConfigFile.retrieve} to pass in {@link Aliases.getOptions}.
     * @param {ConfigOptions} [options] Specify to override builtin options.
     * @see {@link ConfigFile.retrieve}
     * @see {@link ConfigGroupOptions}
     * @returns {Promise<T>}
     * @override
     */
    static retrieve<T extends ConfigFile>(options?: ConfigOptions): Promise<T>;
    /**
     * Updates a group of aliases in a bulk save.
     * @param {array} aliasKeyAndValues An array of strings in the format `<alias>=<value>`.
     * Each element will be saved in the Aliases state file under the group.
     * @param {AliasGroup} [group = AliasGroup.ORGS] The group the alias belongs to. Defaults to ORGS.
     * @returns {Promise<object>} The new aliases that were saved.
     * @example
     * const aliases = await Aliases.parseAndUpdate(['foo=bar', 'bar=baz'])
     */
    static parseAndUpdate(aliasKeyAndValues: string[], group?: AliasGroup): Promise<object>;
    /**
     * Get an alias from a key and group. Shorthand for `Alias.retrieve().get(key)`.
     * @param {string} key The value of the alias to match
     * @param {string} [group=AliasGroup.Orgs] The group the alias belongs to. Defaults to Orgs
     * @returns {Promise<string>} The promise resolved when the alias is retrieved
     */
    static fetch(key: string, group?: AliasGroup): Promise<string>;
}

/**
 * Options when creating the config file. Extends {@link ConfigOptions}.
 * @typedef {object} ConfigGroupOptions
 * @extends ConfigOptions
 * @property {string} defaultGroup The default group for properties to go into.
 */
import { JsonMap, Optional } from '@salesforce/ts-types';
import { ConfigFile, ConfigOptions } from './configFile';
import { ConfigContents, ConfigEntry, ConfigValue } from './configStore';
/**
 * The interface for Config options.
 * *NOTE:* And changes to this interface must also change the jsdoc typedef header above.
 * @interface
 */
export interface ConfigGroupOptions extends ConfigOptions {
    defaultGroup: string;
}
/**
 * A config file that stores config values in groups. e.g. to store different config
 * values for different commands, without having manually manipulate the config.
 *
 * **Note:** All config methods are overwritten to use the {@link ConfigGroup.setDefaultGroup}.
 *
 * @extends ConfigFile
 *
 * @example
 * class MyPluginConfig extents ConfigGroup {
 *     class MyConfig extents ConfigFile {
 *     public static getFileName(): string {
 *         return 'myPluginConfigFilename.json';
 *     }
 * }
 * const myConfig = await MyPluginConfig.retrieve<MyPluginConfig>(ConfigGroup.getOptions('all'));
 * myconfig.setDefaultGroup('myCommand'); // Can be set in your command's init.
 * myConfig.set('mykey', 'myvalue'); // Sets 'myKey' for the 'myCommand' group.
 * myConfig.setInGroup('myKey', 'myvalue', 'all'); // Manually set in another group.
 * await myconfig.write();
 */
export declare class ConfigGroup extends ConfigFile {
    /**
     * Overrides {@link ConfigFile.create} to pass in {@link ConfigGroup.getOptions}.
     * @override
     * @see {@link ConfigFile.create}
     */
    static create<T extends ConfigFile>(options: ConfigOptions): Promise<T>;
    /**
     * Get ConfigGroup specific options, such as the default group.
     * @param {string} defaultGroup The default group to use when creating the config.
     * @param {string} [filename] The filename of the config file. Uses the static {@link getFileName} by default.
     */
    static getOptions(defaultGroup: string, filename?: string): ConfigGroupOptions;
    private defaultGroup;
    /**
     * Sets the default group for all {@link BaseConfigStore} methods to use.
     * @param {String} group The group.
     * @throws {SfdxError} **`{name: 'MissingGroupName'}`:** The group parameter is null or undefined.
     */
    setDefaultGroup(group: string): void;
    /**
     * Set a group of entries in a bulk save.
     * @param {object} newEntries An object representing the aliases to set.
     * @param {string} [group = 'default'] The group the property belongs to.
     * @returns {Promise<object>} The new property that was saved.
     */
    updateValues(newEntries: object, group?: string): Promise<object>;
    /**
     * Set a value on a group.
     * @param {string} key The key.
     * @param {string} value The value.
     * @param {string} [group = 'default'] The group.
     * @returns {Promise<void>} The promise resolved when the value is set.
     */
    updateValue(key: string, value: ConfigValue, group?: string): Promise<void>;
    /**
     * Gets an array of key value pairs.
     * @returns {ConfigEntry[]}
     * @override
     */
    entries(): ConfigEntry[];
    /**
     * Returns a specified element from ConfigGroup.
     * @param {string} key The key.
     * @returns {Optional<ConfigValue>} The associated value.
     * @override
     */
    get(key: string): Optional<ConfigValue>;
    /**
     * Returns a boolean if an element with the specified key exists in the default group.
     * @param {string} key The key.
     * @returns {boolean}
     * @override
     */
    has(key: string): boolean;
    /**
     * Returns an array of the keys from the default group.
     * @returns {string[]}
     * @override
     */
    keys(): string[];
    /**
     * Returns an array of the values from the default group.
     * @returns {ConfigValue[]}
     * @override
     */
    values(): ConfigValue[];
    /**
     * Add or updates an element with the specified key in the default group.
     * @param {string} key The key.
     * @param {ConfigValue} value The value.
     * @returns {ConfigContents}
     * @override
     */
    set(key: string, value: ConfigValue): ConfigContents;
    /**
     * Removes an element with the specified key from the default group.
     * @param {string} key The key.
     * @returns {boolean} True if the item was deleted.
     * @override
     */
    unset(key: string): boolean;
    /**
     * Remove all key value pairs from the default group.
     * @override
     */
    clear(): void;
    /**
     * Get all config content for a group.
     * @param {string} [group = 'default'] The group.
     * @returns {ConfigContents} The contents.
     */
    getGroup(group?: string): ConfigContents;
    /**
     * Returns the value associated to the key and group, or undefined if there is none.
     * @param {string} key The key.
     * @param {string} [group = 'default'] The group. Defaults to the default group.
     * @returns {Optional<ConfigValue>}
     */
    getInGroup(key: string, group?: string): Optional<ConfigValue>;
    /**
     * Convert the config object to a json object.
     * @returns {JsonMap}
     * @override
     */
    toObject(): JsonMap;
    /**
     * Convert an object to a {@link ConfigContents} and set it as the config contents.
     * @param {object} obj The object.
     */
    setContentsFromObject<T extends object>(obj: T): void;
    /**
     * Sets the value for the key and group in the config object.
     * @param key The key.
     * @param [value] The value.
     * @param [group = 'default'] The group. Defaults to the default group.
     * @returns {ConfigContents} The contents.
     */
    setInGroup(key: string, value?: ConfigValue, group?: string): ConfigContents;
}

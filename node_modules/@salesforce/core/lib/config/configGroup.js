"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * Options when creating the config file. Extends {@link ConfigOptions}.
 * @typedef {object} ConfigGroupOptions
 * @extends ConfigOptions
 * @property {string} defaultGroup The default group for properties to go into.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sfdxError_1 = require("../sfdxError");
const configFile_1 = require("./configFile");
/**
 * A config file that stores config values in groups. e.g. to store different config
 * values for different commands, without having manually manipulate the config.
 *
 * **Note:** All config methods are overwritten to use the {@link ConfigGroup.setDefaultGroup}.
 *
 * @extends ConfigFile
 *
 * @example
 * class MyPluginConfig extents ConfigGroup {
 *     class MyConfig extents ConfigFile {
 *     public static getFileName(): string {
 *         return 'myPluginConfigFilename.json';
 *     }
 * }
 * const myConfig = await MyPluginConfig.retrieve<MyPluginConfig>(ConfigGroup.getOptions('all'));
 * myconfig.setDefaultGroup('myCommand'); // Can be set in your command's init.
 * myConfig.set('mykey', 'myvalue'); // Sets 'myKey' for the 'myCommand' group.
 * myConfig.setInGroup('myKey', 'myvalue', 'all'); // Manually set in another group.
 * await myconfig.write();
 */
class ConfigGroup extends configFile_1.ConfigFile {
    constructor() {
        super(...arguments);
        this.defaultGroup = 'default';
    }
    /**
     * Overrides {@link ConfigFile.create} to pass in {@link ConfigGroup.getOptions}.
     * @override
     * @see {@link ConfigFile.create}
     */
    static async create(options) {
        const config = (await super.create(options));
        // First cast T to config file, before we can cast to ConfigGroup
        const group = config;
        group.setDefaultGroup(options.defaultGroup);
        return config;
    }
    /**
     * Get ConfigGroup specific options, such as the default group.
     * @param {string} defaultGroup The default group to use when creating the config.
     * @param {string} [filename] The filename of the config file. Uses the static {@link getFileName} by default.
     */
    static getOptions(defaultGroup, filename) {
        const options = this.getDefaultOptions(true, filename);
        options.defaultGroup = defaultGroup;
        return options;
    }
    /**
     * Sets the default group for all {@link BaseConfigStore} methods to use.
     * @param {String} group The group.
     * @throws {SfdxError} **`{name: 'MissingGroupName'}`:** The group parameter is null or undefined.
     */
    setDefaultGroup(group) {
        if (!group) {
            throw new sfdxError_1.SfdxError('null or undefined group', 'MissingGroupName');
        }
        this.defaultGroup = group;
    }
    /**
     * Set a group of entries in a bulk save.
     * @param {object} newEntries An object representing the aliases to set.
     * @param {string} [group = 'default'] The group the property belongs to.
     * @returns {Promise<object>} The new property that was saved.
     */
    async updateValues(newEntries, group) {
        // Make sure the contents are loaded
        await this.read();
        Object.entries(newEntries).forEach(([key, val]) => this.setInGroup(key, val, group || this.defaultGroup));
        await this.write();
        return newEntries;
    }
    /**
     * Set a value on a group.
     * @param {string} key The key.
     * @param {string} value The value.
     * @param {string} [group = 'default'] The group.
     * @returns {Promise<void>} The promise resolved when the value is set.
     */
    async updateValue(key, value, group) {
        // Make sure the content is loaded
        await this.read();
        this.setInGroup(key, value, group || this.defaultGroup);
        // Then save it
        await this.write();
    }
    /**
     * Gets an array of key value pairs.
     * @returns {ConfigEntry[]}
     * @override
     */
    entries() {
        if (this.getGroup()) {
            return Array.from((this.getGroup()).entries());
        }
        return [];
    }
    /**
     * Returns a specified element from ConfigGroup.
     * @param {string} key The key.
     * @returns {Optional<ConfigValue>} The associated value.
     * @override
     */
    get(key) {
        return this.getInGroup(key);
    }
    /**
     * Returns a boolean if an element with the specified key exists in the default group.
     * @param {string} key The key.
     * @returns {boolean}
     * @override
     */
    has(key) {
        return this.getContents().has(this.defaultGroup) &&
            this.getContents().get(this.defaultGroup).has(key);
    }
    /**
     * Returns an array of the keys from the default group.
     * @returns {string[]}
     * @override
     */
    keys() {
        return Array.from((this.getGroup(this.defaultGroup).keys()));
    }
    /**
     * Returns an array of the values from the default group.
     * @returns {ConfigValue[]}
     * @override
     */
    values() {
        return Array.from((this.getGroup(this.defaultGroup).values()));
    }
    /**
     * Add or updates an element with the specified key in the default group.
     * @param {string} key The key.
     * @param {ConfigValue} value The value.
     * @returns {ConfigContents}
     * @override
     */
    set(key, value) {
        if (!this.getContents().has(this.defaultGroup)) {
            this.getContents().set(this.defaultGroup, new Map());
        }
        const contents = this.getContents().get(this.defaultGroup);
        contents.set(key, value);
        return contents;
    }
    /**
     * Removes an element with the specified key from the default group.
     * @param {string} key The key.
     * @returns {boolean} True if the item was deleted.
     * @override
     */
    unset(key) {
        const groupContents = this.getGroup(this.defaultGroup);
        if (groupContents) {
            return groupContents.delete(key);
        }
        return false;
    }
    /**
     * Remove all key value pairs from the default group.
     * @override
     */
    clear() {
        this.getContents().delete(this.defaultGroup);
    }
    /**
     * Get all config content for a group.
     * @param {string} [group = 'default'] The group.
     * @returns {ConfigContents} The contents.
     */
    getGroup(group) {
        return this.getContents().get(group || this.defaultGroup);
    }
    /**
     * Returns the value associated to the key and group, or undefined if there is none.
     * @param {string} key The key.
     * @param {string} [group = 'default'] The group. Defaults to the default group.
     * @returns {Optional<ConfigValue>}
     */
    getInGroup(key, group) {
        const groupContents = this.getGroup(group);
        if (groupContents) {
            return groupContents.get(key);
        }
    }
    /**
     * Convert the config object to a json object.
     * @returns {JsonMap}
     * @override
     */
    toObject() {
        return Array.from(this.getContents().entries()).reduce((obj, entry) => {
            obj[entry[0]] = Array.from(entry[1].entries()).reduce((sub, subentry) => {
                // @ts-ignore TODO: refactor config to not intermingle js maps and json maps
                sub[subentry[0]] = subentry[1];
                return sub;
            }, {});
            return obj;
        }, {});
    }
    /**
     * Convert an object to a {@link ConfigContents} and set it as the config contents.
     * @param {object} obj The object.
     */
    setContentsFromObject(obj) {
        const contents = new Map(Object.entries(obj));
        Array.from(contents.entries()).forEach(([key, value]) => {
            if (value) {
                contents.set(key, new Map(Object.entries(value)));
            }
        });
        this.setContents(contents);
    }
    /**
     * Sets the value for the key and group in the config object.
     * @param key The key.
     * @param [value] The value.
     * @param [group = 'default'] The group. Defaults to the default group.
     * @returns {ConfigContents} The contents.
     */
    setInGroup(key, value, group) {
        let content = this.getContents();
        group = group || this.defaultGroup;
        if (!content.has(group)) {
            content.set(group, new Map());
        }
        content = content.get(group);
        if (value === undefined) {
            content.delete(key);
        }
        else {
            content.set(key, value);
        }
        return content;
    }
}
exports.ConfigGroup = ConfigGroup;
//# sourceMappingURL=configGroup.js.map
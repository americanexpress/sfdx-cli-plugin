/**
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 *
 * Note: These have to go here for jsdoc
 */
/**
 * The allowed types stored in a config store.
 * @typedef {(string | boolean | object)} ConfigValue
 */
/**
 * The type of entries in a config store defined by the key and value type of {@link ConfigContents}.
 * @typedef {object} ConfigEntry
 * @property {string} key
 * @property {ConfigValue} value
 */
/**
 * The type of content a config stores.
 * @typedef {Map<string, ConfigValue>} ConfigContents
 */
import { AnyJson, JsonMap, Optional } from '@salesforce/ts-types';
/**
 * The allowed types stored in a config store.
 */
export declare type ConfigValue = AnyJson | object;
/**
 * The type of entries in a config store defined by the key and value type of {@link ConfigContents}.
 */
export declare type ConfigEntry = [string, ConfigValue];
/**
 * The type of content a config stores.
 */
export declare type ConfigContents = Map<string, ConfigValue>;
/**
 * An interface for a config object with a persistent store.
 * @interface
 */
export interface ConfigStore {
    entries(): ConfigEntry[];
    get(key: string): Optional<ConfigValue>;
    getKeysByValue(value: ConfigValue): string[];
    has(key: string): boolean;
    keys(): string[];
    set(key: string, value: ConfigValue): ConfigContents;
    unset(key: string): boolean;
    unsetAll(keys: string[]): boolean;
    clear(): void;
    values(): ConfigValue[];
    forEach(actionFn: (key: string, value: ConfigValue) => void): void;
    awaitEach(actionFn: (key: string, value: ConfigValue) => Promise<void>): Promise<void>;
    getContents(): ConfigContents;
    setContents(contents?: ConfigContents): void;
}
/**
 * An abstract class that implements all the config management functions but
 * none of the storage functions.
 *
 * **Note:** To see the interface, look in typescripts autocomplete help or the npm package's ConfigStore.d.ts file.
 * @implements {ConfigStore}
 */
export declare abstract class BaseConfigStore implements ConfigStore {
    private contents;
    constructor(contents?: ConfigContents);
    /**
     * Returns an array of {@link ConfigEntry} for each element in the config.
     * @returns {ConfigEntry}
     */
    entries(): ConfigEntry[];
    /**
     * Returns the value associated to the key, or undefined if there is none.
     * @param {string} key The key.
     * @return {Optional<ConfigValue>}
     */
    get(key: string): Optional<ConfigValue>;
    /**
     * Returns the list of keys that contain a value.
     * @param {ConfigValue} value The value to filter keys on.
     * @returns {string[]}
     */
    getKeysByValue(value: ConfigValue): string[];
    /**
     * Returns a boolean asserting whether a value has been associated to the key in the config object or not.
     * @param {string} key The key.
     */
    has(key: string): boolean;
    /**
     * Returns an array that contains the keys for each element in the config object.
     * @returns {string[]}
     */
    keys(): string[];
    /**
     * Sets the value for the key in the config object.
     * @param {string} key The Key.
     * @param {ConfigValue} value The value.
     * @returns {ConfigContents} Returns the config object.
     */
    set(key: string, value: ConfigValue): ConfigContents;
    /**
     * Returns true if an element in the config object existed and has been removed, or false if the element does not exist. {@link BaseConfigStore.has(key)} will return false afterwards.
     * @param {string} key The key.
     * @returns {boolean}
     */
    unset(key: string): boolean;
    /**
     * Returns true if all elements in the config object existed and have been removed, or false if all the elements do not exist (some may have been removed). {@link BaseConfigStore.has(key)} will return false afterwards.
     * @param {string[]} keys The keys.
     * @returns {boolean}
     */
    unsetAll(keys: string[]): boolean;
    /**
     * Removes all key/value pairs from the config object.
     */
    clear(): void;
    /**
     * Returns an array that contains the values for each element in the config object.
     * @returns {ConfigValue[]}
     */
    values(): ConfigValue[];
    /**
     * Returns the entire config contents.
     * @returns {ConfigContents}
     */
    getContents(): ConfigContents;
    /**
     * Sets the entire config contents.
     * @param {ConfigContents} contents The contents.
     */
    setContents(contents?: ConfigContents): void;
    /**
     * Invokes `actionFn` once for each key-value pair present in the config object.
     * @param {function} actionFn The function `(key: string, value: ConfigValue) => void` to be called for each element.
     */
    forEach(actionFn: (key: string, value: ConfigValue) => void): void;
    /**
     * Asynchronously invokes `actionFn` once for each key-value pair present in the config object.
     * @param {function} actionFn The function `(key: string, value: ConfigValue) => Promise<void>` to be called for each element.
     * @returns {Promise<void>}
     */
    awaitEach(actionFn: (key: string, value: ConfigValue) => Promise<void>): Promise<void>;
    /**
     * Convert the config object to a JSON object.
     * @returns {JsonMap}
     */
    toObject(): JsonMap;
    /**
     * Convert an object to a {@link ConfigContents} and set it as the config contents.
     * @param {object} obj The object.
     */
    setContentsFromObject<T extends object>(obj: T): void;
}

"use strict";
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = require("../util/fs");
const configFile_1 = require("./configFile");
/**
 * Represent a key chain config backed by a json file.
 * @private
 */
class KeychainConfig extends configFile_1.ConfigFile {
    static getFileName() {
        return 'key.json';
    }
    static getDefaultOptions(isGlobal = true, filename) {
        const config = super.getDefaultOptions(isGlobal);
        // The key file is ALWAYS in the global space.
        config.isGlobal = true;
        return config;
    }
    /**
     * Write the config file with new contents. If no new contents are passed in
     * it will write this.contents that was set from read().
     *
     * @param {ConfigContents} newContents the new contents of the file
     * @returns {Promise<ConfigContents>} the written contents
     */
    async write(newContents) {
        if (newContents != null) {
            this.setContents(newContents);
        }
        await fs.mkdirp(path_1.dirname(this.getPath()));
        await fs.writeFile(this.getPath(), JSON.stringify(this.getContents(), null, 4), { mode: '600' });
        return this.getContents();
    }
}
exports.KeychainConfig = KeychainConfig;
//# sourceMappingURL=keychainConfig.js.map
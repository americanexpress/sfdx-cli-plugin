/**
 * An enum of all possible locations for a config value.
 * @typedef LOCATIONS
 * @property {string} GLOBAL Represents the global config.
 * @property {string} LOCAL Represents the local project config.
 * @property {string} ENVIRONMENT Represents environment variables.
 */
/**
 * Information about a config property.
 * @typedef ConfigInfo
 * @property {string} key The config key.
 * @property {string | boolean} value The config value.
 * @property {LOCATIONS} location The location of the config property.
 * @property {string} path The path of the config value.
 * @property {function} isLocal `() => boolean` Location is `LOCATIONS.LOCAL`.
 * @property {function} isGlobal `() => boolean` Location is `LOCATIONS.GLOBAL`.
 * @property {function} isEnvVar `() => boolean` Location is `LOCATIONS.ENVIRONMENT`.
 */
import { Optional } from '@salesforce/ts-types';
import { Config } from './config';
export declare const enum LOCATIONS {
    GLOBAL = "Global",
    LOCAL = "Local",
    ENVIRONMENT = "Environment"
}
/**
 * Information about a config property.
 */
export interface ConfigInfo {
    key: string;
    location?: LOCATIONS;
    value: string | boolean;
    path?: string;
    /**
     * @returns true if the config property is in the local project
     */
    isLocal: () => boolean;
    /**
     * @returns true if the config property is in the global space
     */
    isGlobal: () => boolean;
    /**
     * @returns true if the config property is an environment variable.
     */
    isEnvVar: () => boolean;
}
/**
 * Aggregate global and local project config files, as well as environment variables for
 * `sfdx-config.json`. The resolution happens in the following bottom-up order:
 *
 * 1. Environment variables  (`SFDX_LOG_LEVEL`)
 * 1. Workspace settings  (`<workspace-root>/.sfdx/sfdx-config.json`)
 * 1. Global settings  (`$HOME/.sfdx/sfdx-config.json`)
 *
 * Use {@link ConfigAggregator.create} to instantiate the aggregator.
 *
 * @example
 * const aggregator = await ConfigAggregator.create();
 * console.log(aggregator.getPropertyValue('defaultusername'));
 *
 * @hideconstructor
 */
export declare class ConfigAggregator {
    /**
     * Initialize the aggregator by reading and merging the global and local
     * sfdx config files, then resolving environment variables. This method
     * must be called before getting resolved config properties.
     *
     * @returns {Promise<ConfigAggregator>} Returns the aggregated config object
     */
    static create(): Promise<ConfigAggregator>;
    private allowedProperties;
    private localConfig;
    private globalConfig;
    private envVars;
    private config;
    /**
     * **Do not directly construct instances of this class -- use {@link ConfigAggregator.resolve} instead.**
     *
     * @private
     * @constructor
     */
    protected constructor();
    /**
     * Retrieve the path to the config file.
     * @callback retrieverFunction
     * @param {boolean} isGlobal Is it the global or local project config file?
     * @returns {Promise<string>} The path of the config file.
     */
    /**
     * Get a resolved config property.
     *
     * @param {string} key The key of the property.
     * @returns {string | boolean}
     * @throws {SfdxError}
     *  **`{name: 'UnknownConfigKey'}`:** An attempt to get a property that's not supported.
     */
    getPropertyValue(key: string): string | boolean;
    /**
     * Get a resolved config property.
     *
     * @param {string} key The key of the property.
     * @returns {ConfigInfo}
     */
    getInfo(key: string): ConfigInfo;
    /**
     * Gets a resolved config property location.
     *
     * For example, `getLocation('logLevel')` will return:
     * 1. `LOCATIONS.GLOBAL` if resolved to an environment variable.
     * 1. `LOCATIONS.LOCAL` if resolved to local project config.
     * 1. `LOCATIONS.ENVIRONMENT` if resolved to the global config.
     *
     * @param {string} key The key of the property.
     * @returns {Optional<LOCATIONS>}
     */
    getLocation(key: string): Optional<LOCATIONS>;
    /**
     * Get a resolved file path or environment variable name of the property.
     *
     * For example, `getPath('logLevel')` will return:
     * 1. `$SFDX_LOG_LEVEL` if resolved to an environment variable.
     * 1. `./.sfdx/sfdx-config.json` if resolved to the local config.
     * 1. `~/.sfdx/sfdx-config.json` if resolved to the global config.
     * 1. `undefined`, if not resolved.
     *
     * **Note:** that the path returned may be the absolute path instead of
     * relative paths such as `./` and `~/`.
     *
     * @param {string} key The key of the property.
     * @returns {Optional<string>}
     */
    getPath(key: string): Optional<string>;
    /**
     * Get all resolved config property keys, values, locations, and paths.
     *
     * @example
     * > console.log(aggregator.getConfigInfo());
     * [
     *     { key: 'logLevel', val: 'INFO', location: 'Environment', path: '$SFDX_LOG_LEVEL'}
     *     { key: 'defaultusername', val: '<username>', location: 'Local', path: './.sfdx/sfdx-config.json'}
     * ]
     *
     * @returns {ConfigInfo[]}
     */
    getConfigInfo(): ConfigInfo[];
    /**
     * Get the local project config instance.
     *
     * @returns {Config}
     */
    getLocalConfig(): Config;
    /**
     * Get the global config instance.
     *
     * @returns {Config}
     */
    getGlobalConfig(): Config;
    /**
     * Get the resolved config object from the local, global and environment config instances.
     * @returns {object}
     */
    getConfig(): object;
    /**
     * Get the config properties that are environment variables.
     * @returns {Map<string, string>}
     */
    getEnvVars(): Map<string, string>;
    /**
     * Re-read all property configurations from disk.
     * @returns {Promise<void>}
     */
    reload(): Promise<ConfigAggregator>;
    /**
     * Loads all the properties and aggregates them according to location.
     * @returns {Promise<void>}
     * @private
     */
    private loadProperties;
    /**
     * Set the resolved config object.
     * @param config The config object to set.
     * @private
     */
    private setConfig;
    /**
     * Set the local config object.
     * @param {Config} config The config object value to set.
     * @private
     */
    private setLocalConfig;
    /**
     * Set the global config object.
     * @param {Config} config The config object value to set.
     * @private
     */
    private setGlobalConfig;
    /**
     * Get the allowed properties.
     * @returns {ConfigPropertyMeta[]}
     * @private
     */
    private getAllowedProperties;
    /**
     * Set the allowed properties.
     * @param {ConfigPropertyMeta[]} properties The properties to set.
     * @private
     */
    private setAllowedProperties;
    /**
     * Sets the env variables.
     * @param {Dictionary<string>} envVars The env variables to set.
     * @private
     */
    private setEnvVars;
}

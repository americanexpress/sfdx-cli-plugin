"use strict";
/**
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 *
 * Note: These have to go here for jsdoc
 */
/**
 * The allowed types stored in a config store.
 * @typedef {(string | boolean | object)} ConfigValue
 */
/**
 * The type of entries in a config store defined by the key and value type of {@link ConfigContents}.
 * @typedef {object} ConfigEntry
 * @property {string} key
 * @property {ConfigValue} value
 */
/**
 * The type of content a config stores.
 * @typedef {Map<string, ConfigValue>} ConfigContents
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An abstract class that implements all the config management functions but
 * none of the storage functions.
 *
 * **Note:** To see the interface, look in typescripts autocomplete help or the npm package's ConfigStore.d.ts file.
 * @implements {ConfigStore}
 */
class BaseConfigStore {
    constructor(contents) {
        this.setContents(contents);
    }
    /**
     * Returns an array of {@link ConfigEntry} for each element in the config.
     * @returns {ConfigEntry}
     */
    entries() {
        return Array.from(this.contents.entries());
    }
    /**
     * Returns the value associated to the key, or undefined if there is none.
     * @param {string} key The key.
     * @return {Optional<ConfigValue>}
     */
    get(key) {
        return this.contents.get(key);
    }
    /**
     * Returns the list of keys that contain a value.
     * @param {ConfigValue} value The value to filter keys on.
     * @returns {string[]}
     */
    getKeysByValue(value) {
        const matchedEntries = this.entries().filter((entry) => entry[1] === value);
        // Only return the keys
        return matchedEntries.map((entry) => entry[0]);
    }
    /**
     * Returns a boolean asserting whether a value has been associated to the key in the config object or not.
     * @param {string} key The key.
     */
    has(key) {
        return this.contents.has(key);
    }
    /**
     * Returns an array that contains the keys for each element in the config object.
     * @returns {string[]}
     */
    keys() {
        return Array.from(this.contents.keys());
    }
    /**
     * Sets the value for the key in the config object.
     * @param {string} key The Key.
     * @param {ConfigValue} value The value.
     * @returns {ConfigContents} Returns the config object.
     */
    set(key, value) {
        return this.contents.set(key, value);
    }
    /**
     * Returns true if an element in the config object existed and has been removed, or false if the element does not exist. {@link BaseConfigStore.has(key)} will return false afterwards.
     * @param {string} key The key.
     * @returns {boolean}
     */
    unset(key) {
        return this.contents.delete(key);
    }
    /**
     * Returns true if all elements in the config object existed and have been removed, or false if all the elements do not exist (some may have been removed). {@link BaseConfigStore.has(key)} will return false afterwards.
     * @param {string[]} keys The keys.
     * @returns {boolean}
     */
    unsetAll(keys) {
        return keys.reduce((val, key) => val && this.unset(key), true);
    }
    /**
     * Removes all key/value pairs from the config object.
     */
    clear() {
        return this.contents.clear();
    }
    /**
     * Returns an array that contains the values for each element in the config object.
     * @returns {ConfigValue[]}
     */
    values() {
        return Array.from(this.contents.values());
    }
    /**
     * Returns the entire config contents.
     * @returns {ConfigContents}
     */
    getContents() {
        if (!this.contents) {
            this.setContents();
        }
        return this.contents;
    }
    /**
     * Sets the entire config contents.
     * @param {ConfigContents} contents The contents.
     */
    setContents(contents) {
        this.contents = contents || new Map();
    }
    /**
     * Invokes `actionFn` once for each key-value pair present in the config object.
     * @param {function} actionFn The function `(key: string, value: ConfigValue) => void` to be called for each element.
     */
    forEach(actionFn) {
        const entries = this.entries();
        for (const entry of entries) {
            actionFn(entry[0], entry[1]);
        }
    }
    /**
     * Asynchronously invokes `actionFn` once for each key-value pair present in the config object.
     * @param {function} actionFn The function `(key: string, value: ConfigValue) => Promise<void>` to be called for each element.
     * @returns {Promise<void>}
     */
    async awaitEach(actionFn) {
        const entries = this.entries();
        for (const entry of entries) {
            await actionFn(entry[0], entry[1]);
        }
    }
    /**
     * Convert the config object to a JSON object.
     * @returns {JsonMap}
     */
    toObject() {
        return Array.from(this.contents.entries()).reduce((obj, entry) => {
            // @ts-ignore TODO: refactor config to not intermingle js maps and json maps
            obj[entry[0]] = entry[1];
            return obj;
        }, {});
    }
    /**
     * Convert an object to a {@link ConfigContents} and set it as the config contents.
     * @param {object} obj The object.
     */
    setContentsFromObject(obj) {
        if (obj instanceof Map) {
            this.setContents(obj);
        }
        else {
            this.contents = new Map(Object.entries(obj));
        }
    }
}
exports.BaseConfigStore = BaseConfigStore;
//# sourceMappingURL=configStore.js.map
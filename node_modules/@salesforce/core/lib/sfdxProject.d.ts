import { ConfigFile, ConfigOptions } from './config/configFile';
import { ConfigContents } from './config/configStore';
/**
 * The sfdx-project.json config object. This file determines if a folder is a valid sfdx project.
 *
 * *Note:* Any non-standard (not owned by Salesforce) properties stored in sfdx-project.json should
 * be in a top level property that represents your project or plugin.
 *
 * @extends ConfigFile
 *
 * @example
 * const project = await SfdxProjectJson.retrieve<SfdxProjectJson>();
 * const myPluginProperties = project.get('myplugin') || {};
 * myPluginProperties.myprop = 'someValue';
 * project.set('myplugin', myPluginProperties);
 * await project.write();
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ws_create_new.htm
 */
export declare class SfdxProjectJson extends ConfigFile {
    static getFileName(): string;
    static getDefaultOptions(isGlobal?: boolean): ConfigOptions;
    read(): Promise<ConfigContents>;
}
/**
 * Represents an SFDX project directory. This directory contains a {@link SfdxProjectJson} config file as well as
 * a hidden .sfdx folder that contains all the other local project config files.
 *
 * @example
 * const project = await Project.resolve();
 * const projectJson = await project.resolveProjectConfig();
 * console.log(projectJson.sfdxLoginUrl);
 */
export declare class SfdxProject {
    private path;
    /**
     * Get a Project from a given path or from the working directory.
     * @param {string} path The path of the project.
     * @throws InvalidProjectWorkspace If the current folder is not located in a workspace.
     * @returns {Promise<SfdxProject>} The resolved project.
     */
    static resolve(path?: string): Promise<SfdxProject>;
    /**
     * Performs an upward directory search for an sfdx project file.
     *
     * @param {string} [dir=process.cwd()] The directory path to start traversing from.
     * @returns {Promise<string>} The absolute path to the project.
     * @throws {SfdxError} **`{name: 'InvalidProjectWorkspace'}`** If the current folder is not located in a workspace.
     * @see fs.traverseForFile
     * @see {@link https://nodejs.org/api/process.html#process_process_cwd|process.cwd()}
     */
    static resolveProjectPath(dir?: string): Promise<string>;
    private projectConfig;
    private sfdxProjectJson;
    private sfdxProjectJsonGlobal;
    /**
     * Do not directly construct instances of this class -- use {@link Project.resolve} instead.
     *
     * @private
     * @constructor
     */
    private constructor();
    /**
     * Returns the project path.
     * @returns {string}
     */
    getPath(): string;
    /**
     * Get the sfdx-project.json config. The global sfdx-project.json is used for user defaults
     * that are not checked in to the project specific file.
     *
     * *Note:* When reading values from {@link SfdxProjectJson}, it is recommended to use
     * {@link Project.resolveProjectConfig} instead.
     *
     * @param {boolean} isGlobal True to get the global project file, otherwise the local project config.
     */
    retrieveSfdxProjectJson(isGlobal?: boolean): Promise<SfdxProjectJson>;
    /**
     * The project config is resolved from local and global {@link SfdxProjectJson},
     * {@link ConfigAggregator}, and a set of defaults. It is recommended to use
     * this when reading values from SfdxProjectJson.
     * @returns {object} A resolved config object that contains a bunch of different
     * properties, including some 3rd party custom properties.
     */
    resolveProjectConfig(): Promise<object>;
}

import { AnyJson, JsonMap } from '@salesforce/ts-types';
import { Logger } from './logger';
/**
 * Loads a JSON schema and performs validations against JSON objects.
 */
export declare class SchemaValidator {
    private schemaPath;
    private readonly schemasDir;
    private readonly logger;
    private schema?;
    /**
     * Creates a new `SchemaValidator` instance given a logger and path to a schema file.
     *
     * @param {Logger} logger An {@link SfdxLogger} instance on which to base this class's logger.
     * @param {string} schemaPath The path from which the schema with which to validate should be loaded.
     */
    constructor(logger: Logger, schemaPath: string);
    /**
     * Loads a JSON schema from the `schemaPath` parameter provided at instantiation.
     *
     * @returns {Promise<AnyJson>}
     */
    load(): Promise<JsonMap>;
    /**
     * Performs validation of JSON data against the schema located at the `schemaPath` value provided
     * at instantiation.
     *
     * @param {AnyJson} json A JSON value to validate against this instance's target schema.
     * @returns {Promise<AnyJson>} The validated JSON data.
     * @throws {SfdxError}
     */
    validate(json: AnyJson): Promise<AnyJson>;
    /**
     * Loads local, external schemas from URIs relative to the local schema file.  Does not support loading from
     * remote URIs.
     *
     * @param {JsonMap} schema The main schema to validate against.
     * @returns {Promise<Dictionary<JsonMap>>} A map of external schema local URIs to loaded schema JSON objects.
     * @private
     */
    private loadExternalSchemas;
    /**
     * Load another schema relative to the primary schema when referenced.  Only supports local schema URIs.
     *
     * @param {string} uri The first segment of the $ref schema.
     * @param {function} callback The callback when the external schema is loaded.
     * @return {Promise<JsonMap>}
     * @private
     */
    private loadExternalSchema;
    /**
     * Get a string representation of the schema validation errors.
     *
     * @param {array} errors An array of JsenValidateError objects.
     * @param {JsonMap} schema The validation schema.
     * @return {string}
     * @private
     */
    private getErrorsText;
}

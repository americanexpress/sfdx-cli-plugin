import { AuthInfo } from './authInfo';
import { Org } from './org';
import { SecureBuffer } from './secureBuffer';
/**
 * A Map of Required Salesforce User fields.
 */
export declare const REQUIRED_FIELDS: {
    id: string;
    username: string;
    lastName: string;
    alias: string;
    timeZoneSidKey: string;
    localeSidKey: string;
    emailEncodingKey: string;
    profileId: string;
    languageLocaleKey: string;
    email: string;
};
/**
 * Required fields type needed to represent a Salesforce User object.
 * @see https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_objects_user.htm
 */
export declare type UserFields = {
    -readonly [K in keyof typeof REQUIRED_FIELDS]: string;
};
/**
 * Provides a default set of fields values that can be used to create a user. This is handy for
 * software development purposes.
 *
 * @example
 * const fields: UserFields = await DefaultUserFields.init(org);
 */
export declare class DefaultUserFields {
    /**
     * Used to initialize default values for fields based on a templateUser user. This user will be part of the
     * Standard User profile.
     * @param {string} templateUser The user to base the new user on. It's assumed the template user exists on the org already.
     * @param {string} [newUserName] The name for the new user.
     */
    static init(templateUser: string, newUserName?: string): Promise<DefaultUserFields>;
    id: string;
    username: string;
    alias?: string;
    emailEncodingKey?: string;
    languageLocaleKey?: string;
    lastName?: string;
    localeSidKey?: string;
    profileId?: string;
    timeZoneSidKey?: string;
    email?: string;
    /**
     * Constructor
     * @param {string} [username] The login username for User
     */
    private constructor();
}
/**
 * A class for creating a User, generating a password for a user, and assigning a user to one or more permission sets.
 * See methods for examples.
 */
export declare class User {
    /**
     * Initialize a new instance of a user.
     * @param {Org} org The org associated with the user.
     * @returns {User} A user instance
     */
    static init(org: Org): Promise<User>;
    /**
     * Generate default password for a user.
     * @returns {SecureBuffer} An encrypted buffer containing a utf8 encoded password.
     */
    static generatePasswordUtf8(): SecureBuffer<void>;
    private org;
    private logger;
    private constructor();
    /**
     * Assigns a password to a user. For a user to have the ability to assign their own password, the org needs the
     * following org preference: SelfSetPasswordInApi
     * @param {AuthInfo} info The AuthInfo object for user to assign the password to.
     * @param {SecureBuffer} password [throwWhenRemoveFails = User.generatePasswordUtf8()] A SecureBuffer containing the new password.
     */
    assignPassword(info: AuthInfo, password?: SecureBuffer<void>): Promise<{}>;
    /**
     * Methods to assign one or more permission set names to a user.
     * @param {string} id The Salesforce id of the user to assign the permission set to.
     * @param {string[]} permsetNames An array of permission set names.
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('standardUser')));
     * const user: User = await User.init(org)
     * const fields: UserFields = await user.retrieve();
     * await user.assignPermissionSets(fields.id, ['sfdx', 'approver']);
     */
    assignPermissionSets(id: string, permsetNames: string[]): Promise<void>;
    /**
     * Method for creating a new User.
     *
     * By default scratch orgs only allow creating 2 additional users. Work with Salesforce Customer Service to increase
     * user limits.
     *
     * The Org Preferences required to increase the number of users are:
     * Standard User Licenses
     * Salesforce CRM Content User
     *
     * @param {UserFields} fields The required fields for creating a user.
     * @returns {Promise<AuthInfo>} An AuthInfo object for the new user.
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('fooUser')));
     * const fields: UserFields = await DefaultUserFields.init(org);
     * const user: User = await User.init(org);
     * const info: AuthInfo = await user.create(fields);
     */
    create(fields: UserFields): Promise<AuthInfo>;
    /**
     * Method to retrieve the UserFields for a user.
     * @param {string} username The username of the user
     *
     * @example
     * const org = await Org.create(await Connection.create(await AuthInfo.create('fooUser')));
     * const user: User = await User.init(org);
     * const fields: UserFields = await user.retrieve('boris@thecat.com')
     */
    retrieve(username: string): Promise<UserFields>;
    /**
     * Helper method that verifies the server's User object is available and if so allows persisting the Auth information.
     * @param {AuthInfo} newUserAuthInfo The AuthInfo for the new user.
     */
    private describeUserAndSave;
    /**
     * Helper that makes a REST request to create the user, and update additional required fields.
     * @param {UserFields} fields The configuration the new user should have.
     */
    private createUserInternal;
    /**
     * Update the remaining required fields for the user.
     * @param {UserFields} fields The fields for the user.
     */
    private updateRequiredUserFields;
}

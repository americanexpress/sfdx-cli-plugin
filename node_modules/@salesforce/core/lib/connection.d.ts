import { JsonMap, Optional } from '@salesforce/ts-types';
import { Tooling as JSForceTooling } from 'jsforce';
import { ExecuteOptions } from 'jsforce';
import { QueryResult } from 'jsforce';
import { RequestInfo } from 'jsforce';
import { ConnectionOptions } from 'jsforce';
import { Connection as JSForceConnection } from 'jsforce';
import { AuthFields, AuthInfo } from './authInfo';
import { ConfigAggregator } from './config/configAggregator';
import { Logger } from './logger';
export declare const SFDX_HTTP_HEADERS: {
    'content-type': string;
    'user-agent': string;
};
export interface Tooling extends JSForceTooling {
    /**
     * Executes a query and auto-fetches (i.e., "queryMore") all results.  This is especially
     * useful with large query result sizes, such as over 2000 records.  The default maximum
     * fetch size is 10,000 records.  Modify this via the options argument.
     * @param {string} soql The SOQL string.
     * @param {ExecuteOptions} options The query options.  NOTE: the autoFetch option will always be true.
     * @returns {Promise.<QueryResult<T>>}
     */
    autoFetchQuery<T>(soql: string, options?: ExecuteOptions): Promise<QueryResult<T>>;
}
/**
 * Handles connections and requests to Salesforce Orgs.
 * @extends jsforce.Connection
 *
 * @example
 * // Uses latest API version
 * const connection = await Connection.create(await AuthInfo.create(myAdminUsername));
 * connection.query('SELECT Name from Account');
 *
 * // Use different API version
 * connection.setApiVersion("42.0");
 * connection.query('SELECT Name from Account');
 */
export declare class Connection extends JSForceConnection {
    /**
     * Create and return a connection to an org using authentication info.
     * The returned connection uses the latest API version available on the
     * server unless the apiVersion [config]{@link Config} value is set.
     *
     * @param {AuthInfo} authInfo The authentication info from the persistence store.
     * @param {ConfigAggregator} [configAggregator] The aggregated config object.
     * @returns {Promise<Connection>}
     */
    static create(authInfo: AuthInfo, configAggregator?: ConfigAggregator): Promise<Connection>;
    tooling: Tooling;
    private logger;
    private _logger;
    private _transport;
    private _normalizeUrl;
    private authInfo;
    constructor(options: ConnectionOptions, authInfo: AuthInfo, logger?: Logger);
    /**
     * Send REST API request with given HTTP request info, with connected session information
     * and SFDX headers.
     *
     * @override
     *
     * @param {RequestInfo | string} request HTTP request object or URL to GET request.
     * @param [options] HTTP API request options.
     * @returns {Promise<object>} The request Promise.
     */
    request(request: RequestInfo | string, options?: object): Promise<object>;
    /**
     * Send REST API request with given HTTP request info, with connected session information
     * and SFDX headers. This method returns a raw http response which includes a response body and statusCode.
     *
     * @override
     *
     * @param {RequestInfo | string} request HTTP request object or URL to GET request.
     * @returns {Promise<JsonMap>} The request Promise.
     */
    requestRaw(request: RequestInfo): Promise<JsonMap>;
    /**
     * @returns {string} The Force API base url for the instance.
     */
    baseUrl(): string;
    /**
     * Retrieves the highest api version that is supported by the target server instance.
     * @returns {Promise<string>} The max API version number. i.e 46.0
     */
    retrieveMaxApiVersion(): Promise<string>;
    /**
     * Use the latest API version available on `this.instanceUrl`.
     */
    useLatestApiVersion(): Promise<void>;
    /**
     * Get the API version used for all connection requests.
     * @returns {string}
     */
    getApiVersion(): string;
    /**
     * Set the API version for all connection requests.
     * @param {string} version The API version.
     * @throws {SfdxError} **`{name: 'IncorrectAPIVersion'}`:** Incorrect API version.
     */
    setApiVersion(version: string): void;
    /**
     * Getter for the AuthInfo
     * @returns {AuthInfo} A cloned authInfo.
     */
    getAuthInfoFields(): AuthFields;
    getConnectionOptions(): AuthFields;
    /**
     * Getter for the username of the Salesforce Org
     * @returns {Optional<string>}
     */
    getUsername(): Optional<string>;
    /**
     * Returns true if this connection is using access token auth.
     * @returns {boolean}
     */
    isUsingAccessToken(): boolean;
    /**
     * Normalize a Salesforce url to include a instance information.
     * @param url {string} partial url.
     */
    normalizeUrl(url: string): string;
    /**
     * Executes a query and auto-fetches (i.e., "queryMore") all results.  This is especially
     * useful with large query result sizes, such as over 2000 records.  The default maximum
     * fetch size is 10,000 records.  Modify this via the options argument.
     * @param {string} soql The SOQL string.
     * @param {ExecuteOptions} options The query options.  NOTE: the autoFetch option will always be true.
     * @returns {Promise<QueryResult<T>>}
     */
    autoFetchQuery<T>(soql: string, options?: ExecuteOptions): Promise<QueryResult<T>>;
}

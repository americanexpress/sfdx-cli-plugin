"use strict";
/*
 * Copyright (c) 2016, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kit_1 = require("@salesforce/kit");
const crypto_1 = require("crypto");
const events_1 = require("events");
const os_1 = require("os");
const path_1 = require("path");
const configFile_1 = require("./config/configFile");
const connection_1 = require("./connection");
const crypto_2 = require("./crypto");
const logger_1 = require("./logger");
const messages_1 = require("./messages");
const sfdxError_1 = require("./sfdxError");
const streamingClient_1 = require("./status/streamingClient");
const _uniqid = () => {
    return crypto_1.randomBytes(16).toString('hex');
};
function getTestLocalPath(uid) {
    return Promise.resolve(path_1.join(os_1.tmpdir(), uid, 'sfdx_core', 'local'));
}
function getTestGlobalPath(uid) {
    return Promise.resolve(path_1.join(os_1.tmpdir(), uid, 'sfdx_core', 'global'));
}
async function retrieveRootPath(isGlobal, uid = _uniqid()) {
    return isGlobal ? await getTestGlobalPath(uid) : await getTestLocalPath(uid);
}
function defaultFakeConnectionRequest(request, options) {
    return Promise.resolve({ records: [] });
}
/**
 * @module testSetup
 */
/**
 * Different hooks into {@link ConfigFile} used for testing instead of doing file IO.
 * @typedef {object} TestContext
 * @property {function} readFn A function `() => Promise<ConfigContents>;` that controls
 * all aspect of {@link ConfigFile.read}. For example, it won't set the contents unless
 * explicitly done. Only use this if you know what you are doing. Use retrieveContents
 * instead.
 * @property {function} writeFn A function `() => Promise<void>;` that controls all aspects
 * of {@link ConfigFile.write}. For example, it won't read the contents unless explicitly
 * done. Only use this if you know what you are doing. Use updateContents instead.
 * @property {object} contents The contents that are used when @{link ConfigFile.read} unless
 * retrieveContents is set. This will also contain the new config when @{link ConfigFile.write}
 * is called. This will persist through config instances, such as {@link Alias.update} and
 * {@link Alias.fetch}.
 * @property {function} retrieveContents A function `() => Promise<object>;` to conditionally
 * read based on the config instance. The `this` value will be the config instance.
 * @property {function} updateContents A function `() => Promise<object>;` to conditionally
 * set based on the config instance. The `this` value will be the config instance.
 */
/**
 * Different configuration options when running before each.
 * @typedef {object} TestContext
 * @property {sinon.sandbox} SANDBOX The default sandbox is cleared out before
 * each test run. See [sinon sandbox]{@link http://sinonjs.org/releases/v1.17.7/sandbox/}.
 * @property {SandboxTypes} SANDBOXES An object of different sandboxes. Used when
 * needing to restore parts of the system for customized testing.
 * @property {Logger} TEST_LOGGER The test logger that is used when {@link Logger.child}
 * is used anywhere. It uses memory logging.
 * @property {string} id A unique id for the test run.
 * @property {function} uniqid A function `() => string` that returns unique strings.
 * @property {object} configStubs An object of `[configName: string]: ConfigStub` used in test that interact with config files.
 * names to {@link ConfigStubs} that contain properties used when reading and writing
 * to config files.
 * @property {function} localPathRetriever A function `(uid: string) => Promise<string>;`
 * used when resolving the local path.
 * @property {function} globalPathRetriever A function `(uid: string) => Promise<string>;`
 * used when resolving the global path.
 * @property {function} rootPathRetriever: A function `(isGlobal: boolean, uid?: string) => Promise<string>;`
 * used then resolving paths. Calls localPathRetriever and globalPathRetriever.
 */
/**
 * Use to mock out different pieces of sfdx-core to make testing easier. This will mock out
 * logging to a file, config file reading and writing, local and global path resolution, and
 * *http request using connection (soon)*.
 * @function testSetup
 * @returns {TestContext}
 *
 * @example
 * // In a mocha tests
 * import testSetup from '@salesforce/core/lib/testSetup';
 *
 * const $$ = testSetup();
 *
 * describe(() => {
 *  it('test', () => {
 *    // Stub out your own method
 *    $$.SANDBOX.stub(MyClass.prototype, 'myMethod').returnsFake(() => {});
 *
 *    // Set the contents that is used when aliases are read. Same for all config files.
 *    $$.configStubs.Aliases = { contents: { 'myTestAlias': 'user@company.com' } };
 *
 *    // Will use the contents set above.
 *    const username = Aliases.fetch('myTestAlias');
 *    expect(username).to.equal('user@company.com');
 *  });
 * });
 */
exports.testSetup = kit_1.once((sinon) => {
    if (!sinon) {
        try {
            sinon = require('sinon');
        }
        catch (e) {
            throw new Error('The package sinon was not found. Add it to your package.json and pass it in to testSetup(sinon.sandbox)');
        }
    }
    // Import all the messages files in the sfdx-core messages dir.
    // Messages.importMessagesDirectory(pathJoin(__dirname, '..', '..'));
    messages_1.Messages.importMessagesDirectory(path_1.join(__dirname));
    // Create a global sinon sandbox and a test logger instance for use within tests.
    const defaultSandbox = sinon.createSandbox();
    const testContext = {
        SANDBOX: defaultSandbox,
        SANDBOXES: {
            DEFAULT: defaultSandbox,
            CONFIG: sinon.createSandbox(),
            CRYPTO: sinon.createSandbox(),
            CONNECTION: sinon.createSandbox()
        },
        TEST_LOGGER: new logger_1.Logger({ name: 'SFDX_Core_Test_Logger' }).useMemoryLogging(),
        id: _uniqid(),
        uniqid: _uniqid,
        configStubs: {},
        localPathRetriever: getTestLocalPath,
        globalPathRetriever: getTestGlobalPath,
        rootPathRetriever: retrieveRootPath,
        fakeConnectionRequest: defaultFakeConnectionRequest
    };
    beforeEach(() => {
        // Most core files create a child logger so stub this to return our test logger.
        testContext.SANDBOX.stub(logger_1.Logger, 'child').returns(Promise.resolve(testContext.TEST_LOGGER));
        testContext.SANDBOXES.CONFIG.stub(configFile_1.ConfigFile, 'resolveRootFolder').callsFake((isGlobal) => testContext.rootPathRetriever(isGlobal, testContext.id));
        // Mock out all config file IO for all tests. They can restore individually if they need original functionality.
        testContext.SANDBOXES.CONFIG.stub(configFile_1.ConfigFile.prototype, 'read').callsFake(async function () {
            const stub = testContext.configStubs[this.constructor.name] || {};
            if (stub.readFn) {
                return await stub.readFn.call(this);
            }
            let contents = stub.contents || {};
            if (stub.retrieveContents) {
                contents = await stub.retrieveContents.call(this);
            }
            this.setContentsFromObject(contents);
            return Promise.resolve(this.getContents());
        });
        testContext.SANDBOXES.CONFIG.stub(configFile_1.ConfigFile.prototype, 'write').callsFake(async function (newContents) {
            if (!testContext.configStubs[this.constructor.name]) {
                testContext.configStubs[this.constructor.name] = {};
            }
            const stub = testContext.configStubs[this.constructor.name];
            if (!stub)
                return;
            if (stub.writeFn) {
                return await stub.writeFn.call(this, newContents);
            }
            let contents = newContents || this.getContents();
            if (stub.updateContents) {
                contents = await stub.updateContents.call(this);
            }
            this.setContents(contents);
            stub.contents = this.toObject();
        });
        testContext.SANDBOXES.CRYPTO.stub(crypto_2.Crypto.prototype, 'getKeyChain').callsFake(() => Promise.resolve({
            setPassword: () => Promise.resolve(),
            getPassword: (data, cb) => cb(undefined, '12345678901234567890123456789012')
        }));
        testContext.SANDBOXES.CONNECTION.stub(connection_1.Connection.prototype, 'request').callsFake(function (request, options) {
            if (request === `${this.instanceUrl}/services/data`) {
                return Promise.resolve([{ version: '42.0' }]);
            }
            return testContext.fakeConnectionRequest.call(this, request, options);
        });
    });
    afterEach(() => {
        testContext.SANDBOX.restore();
        Object.values(testContext.SANDBOXES).forEach(theSandbox => theSandbox.restore());
        testContext.configStubs = {};
    });
    return testContext;
});
/**
 * A pre-canned error for try/catch testing.
 * @see shouldThrow
 * @type {SfdxError}
 */
exports.unexpectedResult = new sfdxError_1.SfdxError('This code was expected to failed', 'UnexpectedResult');
/**
 * Use for this testing pattern:
 *
 *  try {
 *      await call()
 *      assert.fail('this should never happen');
 *  } catch (e) {
 *  ...
 *  }
 *
 *  Just do this
 *
 *  try {
 *      await shouldThrow(call()); // If this succeeds unexpectedResultError is thrown.
 *  } catch(e) {
 *  ...
 *  }
 *
 * @param {Promise<AnyJson>} f The async function that is expected to throw.
 * @returns {Promise<void>}
 */
async function shouldThrow(f) {
    await f;
    throw exports.unexpectedResult;
}
exports.shouldThrow = shouldThrow;
/**
 * A helper to determine if a subscription will use callback or errorback.
 * Enable errback to simulate a subscription failure.
 */
var StreamingMockSubscriptionCall;
(function (StreamingMockSubscriptionCall) {
    StreamingMockSubscriptionCall[StreamingMockSubscriptionCall["CALLBACK"] = 0] = "CALLBACK";
    StreamingMockSubscriptionCall[StreamingMockSubscriptionCall["ERRORBACK"] = 1] = "ERRORBACK";
})(StreamingMockSubscriptionCall = exports.StreamingMockSubscriptionCall || (exports.StreamingMockSubscriptionCall = {}));
/**
 * Simulates a comet subscription to a streaming channel.
 */
class StreamingMockCometSubscription extends events_1.EventEmitter {
    constructor(options) {
        super();
        this.options = options;
    }
    callback(callback) {
        if (this.options.subscriptionCall === StreamingMockSubscriptionCall.CALLBACK) {
            setTimeout(() => {
                callback();
                super.emit(StreamingMockCometSubscription.SUBSCRIPTION_COMPLETE);
            }, 0);
        }
    }
    errback(callback) {
        if (this.options.subscriptionCall === StreamingMockSubscriptionCall.ERRORBACK) {
            const error = this.options.subscriptionErrbackError;
            if (!error)
                return;
            setTimeout(() => {
                callback(error);
                super.emit(StreamingMockCometSubscription.SUBSCRIPTION_FAILED);
            }, 0);
        }
    }
}
StreamingMockCometSubscription.SUBSCRIPTION_COMPLETE = 'subscriptionComplete';
StreamingMockCometSubscription.SUBSCRIPTION_FAILED = 'subscriptionFailed';
exports.StreamingMockCometSubscription = StreamingMockCometSubscription;
/**
 * Simulates a comet client. To the core streaming client this mocks the internal comet impl.
 * The uses setTimeout(0ms) event loop phase just so the client can simulate actual streaming without the response
 * latency.
 */
class StreamingMockCometClient extends streamingClient_1.CometClient {
    /**
     * Constructor
     * @param {StreamingMockCometSubscriptionOptions} options Extends the StreamingClient options.
     */
    constructor(options) {
        super();
        this.options = options;
        if (!this.options.messagePlaylist) {
            this.options.messagePlaylist = [{ id: this.options.id }];
        }
    }
    addExtension(extension) { }
    disable(label) { }
    handshake(callback) {
        setTimeout(() => { callback(); }, 0);
    }
    setHeader(name, value) { }
    subscribe(channel, callback) {
        const subscription = new StreamingMockCometSubscription(this.options);
        subscription.on('subscriptionComplete', () => {
            if (!this.options.messagePlaylist)
                return;
            Object.values(this.options.messagePlaylist).forEach(message => {
                setTimeout(() => {
                    callback(message);
                }, 0);
            });
        });
        return subscription;
    }
    disconnect() {
        return Promise.resolve();
    }
}
exports.StreamingMockCometClient = StreamingMockCometClient;
/**
 * Mock class for OrgData.
 */
class MockTestOrgData {
    constructor(id = _uniqid()) {
        this.testId = id;
        this.userId = `user_id_${this.testId}`;
        this.orgId = `${this.testId}`;
        this.username = `admin_${this.testId}@gb.org`;
        this.loginUrl = `http://login.${this.testId}.salesforce.com`;
        this.instanceUrl = `http://instance.${this.testId}.salesforce.com`;
        this.clientId = `${this.testId}/client_id`;
        this.clientSecret = `${this.testId}/client_secret`;
        this.authcode = `${this.testId}/authcode`;
        this.accessToken = `${this.testId}/accessToken`;
        this.refreshToken = `${this.testId}/refreshToken`;
    }
    createDevHubUsername(username) {
        this.devHubUsername = username;
    }
    makeDevHub() {
        kit_1.set(this, 'isDevHub', true);
    }
    createUser(user) {
        const userMock = new MockTestOrgData();
        userMock.username = user;
        userMock.alias = this.alias;
        userMock.devHubUsername = this.devHubUsername;
        userMock.orgId = this.orgId;
        userMock.loginUrl = this.loginUrl;
        userMock.instanceUrl = this.instanceUrl;
        userMock.clientId = this.clientId;
        userMock.clientSecret = this.clientSecret;
        return userMock;
    }
    getMockUserInfo() {
        return {
            Id: this.userId,
            Username: this.username,
            LastName: `user_lastname_${this.testId}`,
            Alias: this.alias,
            TimeZoneSidKey: `user_timezonesidkey_${this.testId}`,
            LocaleSidKey: `user_localesidkey_${this.testId}`,
            EmailEncodingKey: `user_emailencodingkey_${this.testId}`,
            ProfileId: `user_profileid_${this.testId}`,
            LanguageLocaleKey: `user_languagelocalekey_${this.testId}`,
            Email: `user_email@${this.testId}.com`
        };
    }
    async getConfig() {
        const crypto = await crypto_2.Crypto.create();
        const config = new Map();
        config.set('orgId', this.orgId);
        const accessToken = crypto.encrypt(this.accessToken);
        if (accessToken) {
            config.set('accessToken', accessToken);
        }
        const refreshToken = crypto.encrypt(this.refreshToken);
        if (refreshToken) {
            config.set('refreshToken', refreshToken);
        }
        config.set('instanceUrl', this.instanceUrl);
        config.set('loginUrl', this.loginUrl);
        config.set('username', this.username);
        config.set('createdOrgInstance', 'CS1');
        config.set('created', '1519163543003');
        config.set('userId', this.userId);
        // config.set('devHubUsername', 'tn@su-blitz.org');
        if (this.devHubUsername) {
            config.set('devHubUsername', this.devHubUsername);
        }
        const isDevHub = kit_1.get(this, 'isDevHub');
        if (isDevHub) {
            config.set('isDevHub', isDevHub);
        }
        return config;
    }
}
exports.MockTestOrgData = MockTestOrgData;
//# sourceMappingURL=testSetup.js.map
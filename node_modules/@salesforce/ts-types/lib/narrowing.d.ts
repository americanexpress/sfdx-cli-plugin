import { AnyFunction, AnyJson, Dictionary, JsonArray, JsonMap, KeyValue, Many, Nullable, Optional } from './types';
/**
 * Tests whether an `any` value is a `string`.
 *
 * @param value Any value to test.
 */
export declare function isString(value: any): value is string;
/**
 * Tests whether an `any` value is a `number`.
 *
 * @param value Any value to test.
 */
export declare function isNumber(value: any): value is number;
/**
 * Tests whether an `any` value is a `boolean`.
 *
 * @param value Any value to test.
 */
export declare function isBoolean(value: any): value is boolean;
/**
 * Tests whether an `any` value is an `object` subtype.
 *
 * @param value Any value to test.
 */
export declare function isObject(value: any): value is object;
/**
 * Tests whether or not an `any` value is a plain JS object.
 *
 * @param value Any value to test.
 */
export declare function isPlainObject(value: any): value is object;
/**
 * Tests whether an `any` value is an `Array`.
 *
 * @param value Any value to test.
 */
export declare function isArray(value: any): value is any[];
/**
 * Tests whether an `any` value is a `function`.
 *
 * @param value Any value to test.
 */
export declare function isFunction(value: any): value is AnyFunction;
/**
 * Tests whether or not a `key` string is a key of the given object type `T`.
 *
 * @param key The string to test as a key of the target object.
 * @param obj The target object to check the key in.
 */
export declare function isKeyOf<T extends object, K extends Extract<keyof T, string>>(key: string, obj: T): key is K;
/**
 * Tests whether `any` value is a valid JSON type.
 *
 * @param value The value to test.
 */
export declare function isAnyJson(value?: any): boolean;
/**
 * Tests whether an `AnyJson` value is an object.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function isJsonMap(value?: AnyJson): value is JsonMap;
/**
 * Tests whether an `AnyJson` value is an array.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function isJsonArray(value?: AnyJson): value is JsonArray;
/**
 * Narrows an `any` value to an `AnyJson` if it is type-compatible, or returns `undefined` otherwise.
 *
 * @param value The value to test.
 */
export declare function asAnyJson(value: any): Optional<AnyJson>;
/**
 * Narrows an `any` value to an `AnyJson` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asAnyJson(value: any, defaultValue: AnyJson): AnyJson;
/**
 * Narrows an `AnyJson` value to a `string` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function asString(value?: AnyJson): Optional<string>;
/**
 * Narrows an `any` value to a `string` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asString(value: Optional<AnyJson>, defaultValue: string): string;
/**
 * Narrows an `AnyJson` value to a `number` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function asNumber(value?: AnyJson): Optional<number>;
/**
 * Narrows an `any` value to a `number` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asNumber(value: Optional<AnyJson>, defaultValue: number): number;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function asBoolean(value?: AnyJson): Optional<boolean>;
/**
 * Narrows an `any` value to a `boolean` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asBoolean(value: Optional<AnyJson>, defaultValue: boolean): boolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function asJsonMap(value?: AnyJson): Optional<JsonMap>;
/**
 * Narrows an `any` value to a `JsonMap` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asJsonMap(value: Optional<AnyJson>, defaultValue: JsonMap): JsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 */
export declare function asJsonArray(value?: AnyJson): Optional<JsonArray>;
/**
 * Narrows an `any` value to a `JsonArray` if it is type-compatible, or returns the provided default otherwise.
 *
 * @param value The value to test.
 * @param defaultValue The default to return if the value was undefined or of the incorrect type.
 */
export declare function asJsonArray(value: Optional<AnyJson>, defaultValue: JsonArray): JsonArray;
/**
 * Narrows a type `Nullable<T>` to a `T` or raises an error.
 *
 * @param value The value to test.
 * @param message The error message to use if `value` is `undefined` or `null`.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensure<T>(value: Nullable<T>, message?: string): T;
/**
 * Narrows an `any` value to an `AnyJson` if it is type-compatible, or returns undefined otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was not a JSON value type.
 */
export declare function ensureAnyJson(value: any, message?: string): AnyJson;
/**
 * Narrows an `AnyJson` value to a `string` if it is type-compatible, or raises an error otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureString(value?: AnyJson, message?: string): string;
/**
 * Narrows an `AnyJson` value to a `number` if it is type-compatible, or raises an error otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureNumber(value?: AnyJson, message?: string): number;
/**
 * Narrows an `AnyJson` value to a `boolean` if it is type-compatible, or raises an error otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureBoolean(value?: AnyJson, message?: string): boolean;
/**
 * Narrows an `AnyJson` value to a `JsonMap` if it is type-compatible, or raises an error otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureJsonMap(value?: AnyJson, message?: string): JsonMap;
/**
 * Narrows an `AnyJson` value to a `JsonArray` if it is type-compatible, or raises an error otherwise.
 *
 * @param value An `AnyJson` value to test.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined.
 */
export declare function ensureJsonArray(value?: AnyJson, message?: string): JsonArray;
/**
 * Gets `AnyJson` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsAnyJson(json: Optional<JsonMap>, path: Many<string>): Optional<AnyJson>;
/**
 * Gets an `AnyJson` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsAnyJson(json: Optional<JsonMap>, path: Many<string>, defaultValue: AnyJson): AnyJson;
/**
 * Gets a `string` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsString(json: Optional<JsonMap>, path: Many<string>): Optional<string>;
/**
 * Gets a `string` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsString(json: JsonMap, path: Many<string>, defaultValue: string): string;
/**
 * Gets a `number` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsNumber(json: Optional<JsonMap>, path: Many<string>): Optional<number>;
/**
 * Gets a `number` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsNumber(json: Optional<JsonMap>, path: Many<string>, defaultValue: number): number;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsBoolean(json: Optional<JsonMap>, path: Many<string>): Optional<boolean>;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsBoolean(json: Optional<JsonMap>, path: Many<string>, defaultValue: boolean): boolean;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsJsonMap(json: Optional<JsonMap>, path: Many<string>): Optional<JsonMap>;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsJsonMap(json: Optional<JsonMap>, path: Many<string>, defaultValue: JsonMap): JsonMap;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 */
export declare function getAsJsonArray(json: Optional<JsonMap>, path: Many<string>): Optional<JsonArray>;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path, returning a default if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param defaultValue A fallback value.
 */
export declare function getAsJsonArray(json: Optional<JsonMap>, path: Many<string>, defaultValue: JsonArray): JsonArray;
/**
 * Gets an `AnyJson` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureAnyJson(json: Optional<JsonMap>, path: Many<string>, message?: string): AnyJson;
/**
 * Gets a `string` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureString(json: Optional<JsonMap>, path: Many<string>, message?: string): string;
/**
 * Gets a `number` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureNumber(json: Optional<JsonMap>, path: Many<string>, message?: string): number;
/**
 * Gets a `boolean` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureBoolean(json: Optional<JsonMap>, path: Many<string>, message?: string): boolean;
/**
 * Gets a `JsonMap` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureJsonMap(json: Optional<JsonMap>, path: Many<string>, message?: string): JsonMap;
/**
 * Gets a `JsonArray` element of a `JsonMap` given a query path, or raises an error if not found or not type-compatible.
 *
 * @param json The `JsonMap` to query.
 * @param path The query path.
 * @param message The error message to use if `value` is not type-compatible.
 * @throws {@link UnexpectedValueTypeError} If the value was undefined or not type-compatible.
 */
export declare function getEnsureJsonArray(json: Optional<JsonMap>, path: Many<string>, message?: string): JsonArray;
/**
 * Returns the keys of an object of type `T`.  This is like `Object.keys` except the return type
 * captures the known keys of `T`.
 *
 * Note that it is the responsibility of the caller to use this wisely -- there are cases where
 * the runtime set of keys returned may be broader than the type checked set at compile time,
 * so there's potential for this to be abused in ways that are not inherently type safe.  For
 * example, given base class `Animal`, subclass `Fish`, and `const animal: Animal = new Fish();`
 * then `keysOf(animal)` will not type-check the entire set of keys of the object `animal` since
 * it is actually an instance of type `Fish`.
 *
 * In general, it should be both convenient and type-safe to use this when enumerating the keys
 * of simple data objects with known keys.
 *
 * ```
 * interface Point { x: number; y: number; }
 * const point: Point = { x: 1, y: 2 };
 * for (const key of keysOf(point)) {
 *     console.log(key, point[key]);
 * }
 * // x 1
 * // y 2
 * ```
 *
 * @param obj
 */
export declare function keysOf<T extends object>(obj: T): Array<Extract<keyof T, string>>;
/**
 * Returns an array of all entry tuples of type `[string, T]` in a `Dictionary<T>` whose values are neither
 * `null` nor `undefined`.  This can be convenient for enumerating the entries of any `Dictionary` without
 * worrying about performing null checks against possibly `undefined` or `null` values.
 *
 * @param dict The dictionary of interest.
 */
export declare function definiteEntries<T>(dict: Dictionary<T>): Array<KeyValue<T>>;
/**
 * Returns an array of all `string` keys in a `Dictionary<T>` whose values are neither `null` nor `undefined`.
 * This can be convenient for enumerating the definitely assigned keys of any `Dictionary`.
 *
 * @param dict The dictionary of interest.
 */
export declare function definiteKeys<T>(dict: Dictionary<T>): string[];
/**
 * Returns an array of all values of type `T` in a `Dictionary<T>` for values that are neither `null` nor `undefined`.
 * This can be convenient for enumerating all non-nullable values of any `Dictionary`.
 *
 * @param dict The dictionary of interest.
 */
export declare function definiteValues<T>(dict: Dictionary<T>): T[];

import { expect } from './chai';
import * as FancyTypes from './types';
export declare const fancy: FancyTypes.Base<FancyTypes.Context, {
    skip: {
        output: {};
        args: [];
    };
} & {
    only: {
        output: {};
        args: [];
    };
} & {
    retries: {
        output: {};
        args: [number];
    };
} & {
    catch: {
        output: {
            error: Error;
        };
        args: [string | RegExp | ((err: Error) => any), ({
            raiseIfNotThrown?: boolean | undefined;
        } | undefined)?];
    };
} & {
    env: {
        output: {};
        args: [{
            [k: string]: string | null | undefined;
        }, (FancyTypes.EnvOptions | undefined)?];
    };
} & {
    stub: {
        output: {
            stubs: any[];
        };
        args: any[];
    };
} & {
    stdin: {
        output: {};
        args: [string, (number | undefined)?];
    };
} & {
    stderr: {
        output: {
            readonly stderr: string;
        };
        args: [({
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        } | undefined)?];
    };
} & {
    stdout: {
        output: {
            readonly stdout: string;
        };
        args: [({
            print?: boolean | undefined;
            stripColor?: boolean | undefined;
        } | undefined)?];
    };
} & {
    nock: {
        output: {
            error?: Error | undefined;
            nock: number;
        };
        args: [string, FancyTypes.NockOptions | FancyTypes.NockCallback, (FancyTypes.NockCallback | undefined)?];
    };
} & {
    timeout: {
        output: {
            timeout: number;
        };
        args: [(number | undefined)?];
    };
}>;
export declare type Fancy = typeof fancy;
export { expect, FancyTypes, };
export default fancy;

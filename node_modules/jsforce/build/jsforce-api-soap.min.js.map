{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/soap.js","jsforce-api-soap.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Soap","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_","SOAP","SoapApi","conn","_conn","prototype","_invoke","method","message","schema","callback","soapEndpoint","xmlns","endpointUrl","instanceUrl","version","invoke","result","then","res","thenCall","Schemas","convertLead","leadConverts","isArray","LeadConvertResult","success","errors","leadId","accountId","contactId","opportunityId","merge","mergeRequests","MergeResult","id","mergedRecordIds","updatedRelatedIds","emptyRecycleBin","ids","EmptyRecycleBinResult","describeTabs","DescribeTabSetResult","label","logoUrl","namespace","selected","tabs","colors","theme","color","context","iconUrl","icons","height","width","url","contentType","custom","miniIconUrl","name","sobjectName","getServerTimestamp","GetServerTimestampResult","timestamp","getUserInfo","GetUserInfoResult","accessibilityMode","currencySymbol","orgAttachmentFileSizeLimit","orgDefaultCurrencyIsoCode","orgDisallowHtmlAttachments","orgHasPersonAccounts","organizationId","organizationMultiCurrency","organizationName","profileId","roleId","sessionSecondsValid","userDefaultCurrencyIsoCode","userEmail","userFullName","userId","userLanguage","userLocale","userName","userTimeZone","userType","userUiSkin","setPassword","password","resetPassword","on","soap"],"mappings":"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","file":"jsforce-api-soap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @file Salesforce SOAP API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _ = window.jsforce.require('lodash/core');\nvar jsforce = window.jsforce.require('./core');\nvar SOAP = window.jsforce.require('./soap');\n\n/**\n * API class for Partner SOAP call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar SoapApi = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Call SOAP Api (Partner) endpoint\n * @private\n */\nSoapApi.prototype._invoke = function(method, message, schema, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"urn:partner.soap.sforce.com\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/u/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message, { result: schema }).then(function(res) {\n    return res.result;\n  }).thenCall(callback);\n};\n\n\n/* */\nvar Schemas = {};\n\n/**\n * @typedef SoapApi~LeadConvert\n * @prop {String} convertedStatus - Status of converted lead\n * @prop {String} leadId - Lead record Id to convert\n * @prop {String} [accountId] - Account record Id to assign the converted record\n * @prop {String} [contactId] - Contact record Id to assign the converted record\n * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity\n * @prop {String} [opportunityName] - Name of opportunity to create\n * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source\n * @prop {String} [ownerId] - Owner Id\n * @prop {Boolean} [sendNotificationEmail] - True if send notification email\n */\n/**\n * @typedef SoapApi~LeadConvertResult\n * @prop {String} leadId - Lead record Id to convert\n * @prop {String} [accountId] - Account record Id of converted lead\n * @prop {String} [contactId] - Contact record Id of converted lead\n * @prop {String} [opportunityId] - Opportunity record Id created in conversion\n * @prop {Boolean} success - True if successfully converted\n * @prop {Array.<Object>} errors - Error\n */\n/**\n * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.\n *\n * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts\n * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function\n * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}\n */\nSoapApi.prototype.convertLead = function(leadConverts, callback) {\n  var schema = _.isArray(leadConverts) ? [ Schemas.LeadConvertResult ] : Schemas.LeadConvertResult;\n  return this._invoke(\"convertLead\", { leadConverts: leadConverts }, schema, callback);\n};\nSchemas.LeadConvertResult = {\n  success: 'boolean',\n  errors: [],\n  leadId: 'string',\n  accountId: 'string',\n  contactId: 'string',\n  opportunityId: 'string'\n};\n\n/**\n * @typedef SoapApi~MergeRequest\n * @prop {Object} masterRecord - The merge destination record\n * @prop {Array.<String>} recordToMergeIds - Ids of records to merge\n */\n/**\n * @typedef SoapApi~MergeResult\n * @prop {Boolean} success - True if successfully merged\n * @prop {Array.<Object>} errors - Error\n * @prop {String} id - ID of the master record\n * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record\n * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge\n */\n\n/**\n * Merge up to three records into one\n *\n * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests\n * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function\n * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}\n */\nSoapApi.prototype.merge = function(mergeRequests, callback) {\n  var schema = _.isArray(mergeRequests) ? [ Schemas.MergeResult ] : Schemas.MergeResult;\n  return this._invoke(\"merge\", { mergeRequests: mergeRequests }, schema, callback);\n};\nSchemas.MergeResult = {\n  success: 'boolean',\n  errors: [],\n  id: 'string',\n  mergedRecordIds: ['string'],\n  updatedRelatedIds: ['string']\n};\n\n\n/**\n * @typedef SoapApi~EmptyRecycleBinResult\n * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin\n * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record\n * @prop {Array.<Object>} errors - Errors\n */\n/**\n * Delete records from the recycle bin immediately\n *\n * @param {Array.<String>} ids - Record ids to empty from recycle bin\n * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}\n */\nSoapApi.prototype.emptyRecycleBin = function(ids, callback) {\n  return this._invoke(\"emptyRecycleBin\", { ids: ids }, [ Schemas.EmptyRecycleBinResult ], callback);\n};\nSchemas.EmptyRecycleBinResult = {\n  id: 'string',\n  success: 'boolean',\n  errors: []\n};\n\n\n/**\n * @typedef SoapApi~DescribeTabSetResult\n * @prop {String} label - The display label for this standard or custom app\n * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app\n * @prop {String} namespace - Namespace of application package\n * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app\n * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app\n */\n/**\n * @typedef SoapApi~DescribeTab\n * @prop {Array.<Object>} colors - Array of color information used for a tab\n * @prop {Boolean} custom - true if this is a custom tab\n * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab\n * @prop {Array.<Object>} icons - Array of icon information used for a tab\n * @prop {String} label - The display label for this tab\n * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab\n * @prop {String} name - The API name of the tab\n * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab\n * @prop {String} url - A fully qualified URL for viewing this tab\n */\n/**\n * Returns information about the standard and custom apps available to the logged-in user\n *\n * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}\n */\nSoapApi.prototype.describeTabs = function(callback) {\n  return this._invoke(\"describeTabs\", {}, [ Schemas.DescribeTabSetResult ], callback);\n};\nSchemas.DescribeTabSetResult = {\n  label: 'string',\n  logoUrl: 'string',\n  namespace: 'string',\n  selected: 'boolean',\n  tabs: [{\n    colors: [{\n      theme: 'string',\n      color: 'string',\n      context: 'string'\n    }],\n    iconUrl: 'string',\n    icons: [{\n      theme: 'string',\n      height: 'number',\n      width: 'number',\n      url: 'string',\n      contentType: 'string'\n    }],\n    label: 'string',\n    custom: 'boolean',\n    miniIconUrl: 'string',\n    name: 'string',\n    sobjectName: 'string',\n    url: 'string'\n  }]\n};\n\n/**\n * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API\n *\n * @typedef SoapApi~ServerTimestampResult\n * @prop {String} timestamp - Timestamp\n */\n/**\n * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~ServerTimestampResult>}\n */\nSoapApi.prototype.getServerTimestamp = function(callback) {\n  return this._invoke(\"getServerTimestamp\", {}, Schemas.GetServerTimestampResult, callback);\n};\nSchemas.GetServerTimestampResult = {\n  timestamp: 'string'\n};\n\n/**\n * @typedef SoapApi~UserInfoResult\n * @prop {Boolean} accessibilityMode\n * @prop {String} currencySymbol\n * @prop {Number} orgAttachmentFileSizeLimit\n * @prop {String} orgDefaultCurrencyIsoCode\n * @prop {String} orgDisallowHtmlAttachments\n * @prop {Boolean} orgHasPersonAccounts\n * @prop {String} organizationId\n * @prop {Boolean} organizationMultiCurrency\n * @prop {String} organizationName\n * @prop {String} profileId\n * @prop {String} roleId\n * @prop {Number} sessionSecondsValid\n * @prop {String} userDefaultCurrencyIsoCode\n * @prop {String} userEmail\n * @prop {String} userFullName\n * @prop {String} userId\n * @prop {String} userLanguage\n * @prop {String} userLocale\n * @prop {String} userName\n * @prop {String} userTimeZone\n * @prop {String} userType\n * @prop {String} userUiSkin\n */\n/**\n * Retrieves personal information for the user associated with the current session\n *\n * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~UserInfoResult>}\n */\nSoapApi.prototype.getUserInfo = function(callback) {\n  return this._invoke(\"getUserInfo\", {}, Schemas.GetUserInfoResult, callback);\n};\nSchemas.GetUserInfoResult = {\n  accessibilityMode: 'boolean',\n  currencySymbol: 'string',\n  orgAttachmentFileSizeLimit: 'number',\n  orgDefaultCurrencyIsoCode: 'string',\n  orgDisallowHtmlAttachments: 'boolean',\n  orgHasPersonAccounts: 'boolean',\n  organizationId: 'string',\n  organizationMultiCurrency: 'boolean',\n  organizationName: 'string',\n  profileId: 'string',\n  roleId: 'string',\n  sessionSecondsValid: 'number',\n  userDefaultCurrencyIsoCode: 'string',\n  userEmail: 'string',\n  userFullName: 'string',\n  userId: 'string',\n  userLanguage: 'string',\n  userLocale: 'string',\n  userName: 'string',\n  userTimeZone: 'string',\n  userType: 'string',\n  userUiSkin: 'string'\n};\n\n/**\n * Sets the specified user’s password to the specified value\n *\n * @param {String} userId - User Id to set password\n * @param {String} password - New password\n * @param {Callback.<String>} [callback] - Callback function\n * @returns {Promise.<String>}\n */\nSoapApi.prototype.setPassword = function(userId, password, callback) {\n  return this._invoke(\"setPassword\", { userId: userId, password: password }, callback);\n};\n\n/**\n * @typedef SoapApi~ResetPasswordResult\n * @prop {String} password\n */\n/**\n * Resets the specified user’s password\n *\n * @param {String} userId - User Id to set password\n * @param {String} password - New password\n * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~ResetPasswordResult>}\n */\nSoapApi.prototype.resetPassword = function(userId, callback) {\n  return this._invoke(\"resetPassword\", { userId: userId }, callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.soap = new SoapApi(conn);\n});\n\n\nmodule.exports = SoapApi;\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Soap = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file Salesforce SOAP API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar _ = window.jsforce.require('lodash/core');\nvar jsforce = window.jsforce.require('./core');\nvar SOAP = window.jsforce.require('./soap');\n\n/**\n * API class for Partner SOAP call\n *\n * @class\n * @param {Connection} conn - Connection\n */\nvar SoapApi = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Call SOAP Api (Partner) endpoint\n * @private\n */\nSoapApi.prototype._invoke = function(method, message, schema, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"urn:partner.soap.sforce.com\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/u/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message, { result: schema }).then(function(res) {\n    return res.result;\n  }).thenCall(callback);\n};\n\n\n/* */\nvar Schemas = {};\n\n/**\n * @typedef SoapApi~LeadConvert\n * @prop {String} convertedStatus - Status of converted lead\n * @prop {String} leadId - Lead record Id to convert\n * @prop {String} [accountId] - Account record Id to assign the converted record\n * @prop {String} [contactId] - Contact record Id to assign the converted record\n * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity\n * @prop {String} [opportunityName] - Name of opportunity to create\n * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source\n * @prop {String} [ownerId] - Owner Id\n * @prop {Boolean} [sendNotificationEmail] - True if send notification email\n */\n/**\n * @typedef SoapApi~LeadConvertResult\n * @prop {String} leadId - Lead record Id to convert\n * @prop {String} [accountId] - Account record Id of converted lead\n * @prop {String} [contactId] - Contact record Id of converted lead\n * @prop {String} [opportunityId] - Opportunity record Id created in conversion\n * @prop {Boolean} success - True if successfully converted\n * @prop {Array.<Object>} errors - Error\n */\n/**\n * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.\n *\n * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts\n * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function\n * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}\n */\nSoapApi.prototype.convertLead = function(leadConverts, callback) {\n  var schema = _.isArray(leadConverts) ? [ Schemas.LeadConvertResult ] : Schemas.LeadConvertResult;\n  return this._invoke(\"convertLead\", { leadConverts: leadConverts }, schema, callback);\n};\nSchemas.LeadConvertResult = {\n  success: 'boolean',\n  errors: [],\n  leadId: 'string',\n  accountId: 'string',\n  contactId: 'string',\n  opportunityId: 'string'\n};\n\n/**\n * @typedef SoapApi~MergeRequest\n * @prop {Object} masterRecord - The merge destination record\n * @prop {Array.<String>} recordToMergeIds - Ids of records to merge\n */\n/**\n * @typedef SoapApi~MergeResult\n * @prop {Boolean} success - True if successfully merged\n * @prop {Array.<Object>} errors - Error\n * @prop {String} id - ID of the master record\n * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record\n * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge\n */\n\n/**\n * Merge up to three records into one\n *\n * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests\n * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function\n * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}\n */\nSoapApi.prototype.merge = function(mergeRequests, callback) {\n  var schema = _.isArray(mergeRequests) ? [ Schemas.MergeResult ] : Schemas.MergeResult;\n  return this._invoke(\"merge\", { mergeRequests: mergeRequests }, schema, callback);\n};\nSchemas.MergeResult = {\n  success: 'boolean',\n  errors: [],\n  id: 'string',\n  mergedRecordIds: ['string'],\n  updatedRelatedIds: ['string']\n};\n\n\n/**\n * @typedef SoapApi~EmptyRecycleBinResult\n * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin\n * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record\n * @prop {Array.<Object>} errors - Errors\n */\n/**\n * Delete records from the recycle bin immediately\n *\n * @param {Array.<String>} ids - Record ids to empty from recycle bin\n * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}\n */\nSoapApi.prototype.emptyRecycleBin = function(ids, callback) {\n  return this._invoke(\"emptyRecycleBin\", { ids: ids }, [ Schemas.EmptyRecycleBinResult ], callback);\n};\nSchemas.EmptyRecycleBinResult = {\n  id: 'string',\n  success: 'boolean',\n  errors: []\n};\n\n\n/**\n * @typedef SoapApi~DescribeTabSetResult\n * @prop {String} label - The display label for this standard or custom app\n * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app\n * @prop {String} namespace - Namespace of application package\n * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app\n * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app\n */\n/**\n * @typedef SoapApi~DescribeTab\n * @prop {Array.<Object>} colors - Array of color information used for a tab\n * @prop {Boolean} custom - true if this is a custom tab\n * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab\n * @prop {Array.<Object>} icons - Array of icon information used for a tab\n * @prop {String} label - The display label for this tab\n * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab\n * @prop {String} name - The API name of the tab\n * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab\n * @prop {String} url - A fully qualified URL for viewing this tab\n */\n/**\n * Returns information about the standard and custom apps available to the logged-in user\n *\n * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function\n * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}\n */\nSoapApi.prototype.describeTabs = function(callback) {\n  return this._invoke(\"describeTabs\", {}, [ Schemas.DescribeTabSetResult ], callback);\n};\nSchemas.DescribeTabSetResult = {\n  label: 'string',\n  logoUrl: 'string',\n  namespace: 'string',\n  selected: 'boolean',\n  tabs: [{\n    colors: [{\n      theme: 'string',\n      color: 'string',\n      context: 'string'\n    }],\n    iconUrl: 'string',\n    icons: [{\n      theme: 'string',\n      height: 'number',\n      width: 'number',\n      url: 'string',\n      contentType: 'string'\n    }],\n    label: 'string',\n    custom: 'boolean',\n    miniIconUrl: 'string',\n    name: 'string',\n    sobjectName: 'string',\n    url: 'string'\n  }]\n};\n\n/**\n * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API\n *\n * @typedef SoapApi~ServerTimestampResult\n * @prop {String} timestamp - Timestamp\n */\n/**\n * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~ServerTimestampResult>}\n */\nSoapApi.prototype.getServerTimestamp = function(callback) {\n  return this._invoke(\"getServerTimestamp\", {}, Schemas.GetServerTimestampResult, callback);\n};\nSchemas.GetServerTimestampResult = {\n  timestamp: 'string'\n};\n\n/**\n * @typedef SoapApi~UserInfoResult\n * @prop {Boolean} accessibilityMode\n * @prop {String} currencySymbol\n * @prop {Number} orgAttachmentFileSizeLimit\n * @prop {String} orgDefaultCurrencyIsoCode\n * @prop {String} orgDisallowHtmlAttachments\n * @prop {Boolean} orgHasPersonAccounts\n * @prop {String} organizationId\n * @prop {Boolean} organizationMultiCurrency\n * @prop {String} organizationName\n * @prop {String} profileId\n * @prop {String} roleId\n * @prop {Number} sessionSecondsValid\n * @prop {String} userDefaultCurrencyIsoCode\n * @prop {String} userEmail\n * @prop {String} userFullName\n * @prop {String} userId\n * @prop {String} userLanguage\n * @prop {String} userLocale\n * @prop {String} userName\n * @prop {String} userTimeZone\n * @prop {String} userType\n * @prop {String} userUiSkin\n */\n/**\n * Retrieves personal information for the user associated with the current session\n *\n * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~UserInfoResult>}\n */\nSoapApi.prototype.getUserInfo = function(callback) {\n  return this._invoke(\"getUserInfo\", {}, Schemas.GetUserInfoResult, callback);\n};\nSchemas.GetUserInfoResult = {\n  accessibilityMode: 'boolean',\n  currencySymbol: 'string',\n  orgAttachmentFileSizeLimit: 'number',\n  orgDefaultCurrencyIsoCode: 'string',\n  orgDisallowHtmlAttachments: 'boolean',\n  orgHasPersonAccounts: 'boolean',\n  organizationId: 'string',\n  organizationMultiCurrency: 'boolean',\n  organizationName: 'string',\n  profileId: 'string',\n  roleId: 'string',\n  sessionSecondsValid: 'number',\n  userDefaultCurrencyIsoCode: 'string',\n  userEmail: 'string',\n  userFullName: 'string',\n  userId: 'string',\n  userLanguage: 'string',\n  userLocale: 'string',\n  userName: 'string',\n  userTimeZone: 'string',\n  userType: 'string',\n  userUiSkin: 'string'\n};\n\n/**\n * Sets the specified user’s password to the specified value\n *\n * @param {String} userId - User Id to set password\n * @param {String} password - New password\n * @param {Callback.<String>} [callback] - Callback function\n * @returns {Promise.<String>}\n */\nSoapApi.prototype.setPassword = function(userId, password, callback) {\n  return this._invoke(\"setPassword\", { userId: userId, password: password }, callback);\n};\n\n/**\n * @typedef SoapApi~ResetPasswordResult\n * @prop {String} password\n */\n/**\n * Resets the specified user’s password\n *\n * @param {String} userId - User Id to set password\n * @param {String} password - New password\n * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function\n * @returns {Promise.<SoapApi~ResetPasswordResult>}\n */\nSoapApi.prototype.resetPassword = function(userId, callback) {\n  return this._invoke(\"resetPassword\", { userId: userId }, callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.soap = new SoapApi(conn);\n});\n\n\nmodule.exports = SoapApi;\n\n},{}]},{},[1])(1)\n});\n\n"]}
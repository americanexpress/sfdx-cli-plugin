{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/apex.js","jsforce-api-apex.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Apex","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","conn","_conn","prototype","_baseUrl","instanceUrl","_createRequestParams","method","path","body","options","params","url","_headers","test","headers","JSON","stringify","get","callback","undefined","request","thenCall","post","put","patch","del","on","apex"],"mappings":"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","file":"jsforce-api-apex.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @file Manages Salesforce Apex REST endpoint calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = window.jsforce.require('./core');\n\n/**\n * API class for Apex REST endpoint call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Apex = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * @private\n */\nApex.prototype._baseUrl = function() {\n  return this._conn.instanceUrl + \"/services/apexrest\";\n};\n\n/**\n * @private\n */\nApex.prototype._createRequestParams = function(method, path, body, options) {\n  var params = {\n    method: method,\n    url: this._baseUrl() + path\n  },\n  _headers = {};\n  if(options && 'object' === typeof options['headers']){\n    _headers = options['headers'];\n  }\n  if (!/^(GET|DELETE)$/i.test(method)) {\n    _headers[\"Content-Type\"] = \"application/json\";\n  }\n  params.headers = _headers;\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n  return params;\n};\n\n/**\n * Call Apex REST service in GET request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.get = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in POST request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.post = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('POST', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PUT request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.put = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PUT', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PATCH request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.patch = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PATCH', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Synonym of Apex#delete()\n *\n * @method Apex#del\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n/**\n * Call Apex REST service in DELETE request\n *\n * @method Apex#delete\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.del =\n  Apex.prototype[\"delete\"] = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.apex = new Apex(conn);\n});\n\n\nmodule.exports = Apex;\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Apex = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file Manages Salesforce Apex REST endpoint calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar jsforce = window.jsforce.require('./core');\n\n/**\n * API class for Apex REST endpoint call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Apex = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * @private\n */\nApex.prototype._baseUrl = function() {\n  return this._conn.instanceUrl + \"/services/apexrest\";\n};\n\n/**\n * @private\n */\nApex.prototype._createRequestParams = function(method, path, body, options) {\n  var params = {\n    method: method,\n    url: this._baseUrl() + path\n  },\n  _headers = {};\n  if(options && 'object' === typeof options['headers']){\n    _headers = options['headers'];\n  }\n  if (!/^(GET|DELETE)$/i.test(method)) {\n    _headers[\"Content-Type\"] = \"application/json\";\n  }\n  params.headers = _headers;\n  if (body) {\n    params.body = JSON.stringify(body);\n  }\n  return params;\n};\n\n/**\n * Call Apex REST service in GET request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.get = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in POST request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} options - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.post = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('POST', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PUT request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.put = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PUT', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Call Apex REST service in PATCH request\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.patch = function(path, body, options, callback) {\n  if (typeof body === 'function') {\n    callback = body;\n    body = undefined;\n    options = undefined;\n  }\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  var params = this._createRequestParams('PATCH', path, body, options);\n  return this._conn.request(params).thenCall(callback);\n};\n\n/**\n * Synonym of Apex#delete()\n *\n * @method Apex#del\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\n/**\n * Call Apex REST service in DELETE request\n *\n * @method Apex#delete\n *\n * @param {String} path - URL path to Apex REST service\n * @param {Object} [body] - Request body\n * @param {Object} [options] - Holds headers and other meta data for the request.\n * @param {Callback.<Object>} [callback] - Callback function\n * @returns {Promise.<Object>}\n */\nApex.prototype.del =\n  Apex.prototype[\"delete\"] = function(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.apex = new Apex(conn);\n});\n\n\nmodule.exports = Apex;\n\n},{}]},{},[1])(1)\n});\n\n"]}